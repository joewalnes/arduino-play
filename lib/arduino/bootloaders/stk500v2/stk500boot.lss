
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fd6  0001e000  0001e000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800200  00800200  0000204a  2**0
                  ALLOC
  2 .stab         000008c4  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000013c  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000028  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000009df  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000265a  00000000  00000000  00003453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ea  00000000  00000000  00005aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d7  00000000  00000000  00005d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00007470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c43  00000000  00000000  00007540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001716  00000000  00000000  00008183  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00009899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	0c 94 f6 f2 	jmp	0x1e5ec	; 0x1e5ec <__ctors_end>
   1e004:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e008:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e00c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e010:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e014:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e018:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e01c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e020:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e024:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e028:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e02c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e030:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e034:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e038:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e03c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e040:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e044:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e048:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e04c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e050:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e054:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e058:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e05c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e060:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e064:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e068:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e06c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e070:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e074:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e078:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e07c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e080:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e084:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e088:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e08c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e090:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e094:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e098:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e09c:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0a0:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0a4:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0a8:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0ac:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0b0:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0b4:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0b8:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0bc:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0c0:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0c4:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0c8:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0cc:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0d0:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0d4:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0d8:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0dc:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>
   1e0e0:	0c 94 1d f3 	jmp	0x1e63a	; 0x1e63a <__bad_interrupt>

0001e0e4 <gTextMsg_CPU_Name>:
   1e0e4:	41 54 6d 65 67 61 31 32 38 30 00                    ATmega1280.

0001e0ef <gTextMsg_Explorer>:
   1e0ef:	41 72 64 75 69 6e 6f 20 65 78 70 6c 6f 72 65 72     Arduino explorer
   1e0ff:	20 73 74 6b 35 30 30 56 32 20 62 79 20 4d 4c 53      stk500V2 by MLS
	...

0001e110 <gTextMsg_Prompt>:
   1e110:	42 6f 6f 74 6c 6f 61 64 65 72 3e 00                 Bootloader>.

0001e11c <gTextMsg_HUH>:
   1e11c:	48 75 68 3f 00                                      Huh?.

0001e121 <gTextMsg_COMPILED_ON>:
   1e121:	43 6f 6d 70 69 6c 65 64 20 6f 6e 20 20 3d 20 00     Compiled on  = .

0001e131 <gTextMsg_CPU_Type>:
   1e131:	43 50 55 20 54 79 70 65 20 20 20 20 20 3d 20 00     CPU Type     = .

0001e141 <gTextMsg_AVR_ARCH>:
   1e141:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 20 3d 20 00     __AVR_ARCH__ = .

0001e151 <gTextMsg_AVR_LIBC>:
   1e151:	41 56 52 20 4c 69 62 43 20 56 65 72 20 3d 20 00     AVR LibC Ver = .

0001e161 <gTextMsg_GCC_VERSION>:
   1e161:	47 43 43 20 56 65 72 73 69 6f 6e 20 20 3d 20 00     GCC Version  = .

0001e171 <gTextMsg_CPU_SIGNATURE>:
   1e171:	43 50 55 20 73 69 67 6e 61 74 75 72 65 3d 20 00     CPU signature= .

0001e181 <gTextMsg_FUSE_BYTE_LOW>:
   1e181:	4c 6f 77 20 66 75 73 65 20 20 20 20 20 3d 20 00     Low fuse     = .

0001e191 <gTextMsg_FUSE_BYTE_HIGH>:
   1e191:	48 69 67 68 20 66 75 73 65 20 20 20 20 3d 20 00     High fuse    = .

0001e1a1 <gTextMsg_FUSE_BYTE_EXT>:
   1e1a1:	45 78 74 20 66 75 73 65 20 20 20 20 20 3d 20 00     Ext fuse     = .

0001e1b1 <gTextMsg_FUSE_BYTE_LOCK>:
   1e1b1:	4c 6f 63 6b 20 66 75 73 65 20 20 20 20 3d 20 00     Lock fuse    = .

0001e1c1 <gTextMsg_GCC_DATE_STR>:
   1e1c1:	41 70 72 20 32 36 20 32 30 31 31 00                 Apr 26 2011.

0001e1cd <gTextMsg_AVR_LIBC_VER_STR>:
   1e1cd:	31 2e 36 2e 37 00                                   1.6.7.

0001e1d3 <gTextMsg_GCC_VERSION_STR>:
   1e1d3:	34 2e 33 2e 33 00                                   4.3.3.

0001e1d9 <gTextMsg_VECTOR_HEADER>:
   1e1d9:	56 23 20 20 20 41 44 44 52 20 20 20 6f 70 20 63     V#   ADDR   op c
   1e1e9:	6f 64 65 20 20 20 20 20 69 6e 73 74 72 75 63 74     ode     instruct
   1e1f9:	69 6f 6e 20 61 64 64 72 20 20 20 49 6e 74 65 72     ion addr   Inter
   1e209:	72 75 70 74 00                                      rupt.

0001e20e <gTextMsg_noVector>:
   1e20e:	6e 6f 20 76 65 63 74 6f 72 00                       no vector.

0001e218 <gTextMsg_rjmp>:
   1e218:	72 6a 6d 70 20 20 00                                rjmp  .

0001e21f <gTextMsg_jmp>:
   1e21f:	6a 6d 70 20 00                                      jmp .

0001e224 <gTextMsg_WHAT_PORT>:
   1e224:	57 68 61 74 20 70 6f 72 74 3a 00                    What port:.

0001e22f <gTextMsg_PortNotSupported>:
   1e22f:	50 6f 72 74 20 6e 6f 74 20 73 75 70 70 6f 72 74     Port not support
   1e23f:	65 64 00                                            ed.

0001e242 <gTextMsg_MustBeLetter>:
   1e242:	4d 75 73 74 20 62 65 20 61 20 6c 65 74 74 65 72     Must be a letter
	...

0001e253 <gTextMsg_SPACE>:
   1e253:	20 00                                                .

0001e255 <gTextMsg_WriteToEEprom>:
   1e255:	57 72 69 74 74 69 6e 67 20 45 45 00                 Writting EE.

0001e261 <gTextMsg_ReadingEEprom>:
   1e261:	52 65 61 64 69 6e 67 20 45 45 00                    Reading EE.

0001e26c <gTextMsg_EEPROMerrorCnt>:
   1e26c:	65 65 70 72 6f 6d 20 65 72 72 6f 72 20 63 6f 75     eeprom error cou
   1e27c:	6e 74 3d 00                                         nt=.

0001e280 <gTextMsg_PORT>:
   1e280:	50 4f 52 54 00                                      PORT.

0001e285 <gTextMsg_HELP_MSG_0>:
   1e285:	30 3d 5a 65 72 6f 20 61 64 64 72 65 73 73 20 63     0=Zero address c
   1e295:	74 72 73 00                                         trs.

0001e299 <gTextMsg_HELP_MSG_QM>:
   1e299:	3f 3d 43 50 55 20 73 74 61 74 73 00                 ?=CPU stats.

0001e2a5 <gTextMsg_HELP_MSG_AT>:
   1e2a5:	40 3d 45 45 50 52 4f 4d 20 74 65 73 74 00           @=EEPROM test.

0001e2b3 <gTextMsg_HELP_MSG_B>:
   1e2b3:	42 3d 42 6c 69 6e 6b 20 4c 45 44 00                 B=Blink LED.

0001e2bf <gTextMsg_HELP_MSG_E>:
   1e2bf:	45 3d 44 75 6d 70 20 45 45 50 52 4f 4d 00           E=Dump EEPROM.

0001e2cd <gTextMsg_HELP_MSG_F>:
   1e2cd:	46 3d 44 75 6d 70 20 46 4c 41 53 48 00              F=Dump FLASH.

0001e2da <gTextMsg_HELP_MSG_H>:
   1e2da:	48 3d 48 65 6c 70 00                                H=Help.

0001e2e1 <gTextMsg_HELP_MSG_L>:
   1e2e1:	4c 3d 4c 69 73 74 20 49 2f 4f 20 50 6f 72 74 73     L=List I/O Ports
	...

0001e2f2 <gTextMsg_HELP_MSG_Q>:
   1e2f2:	51 3d 51 75 69 74 20 26 20 6a 75 6d 70 20 74 6f     Q=Quit & jump to
   1e302:	20 75 73 65 72 20 70 67 6d 00                        user pgm.

0001e30c <gTextMsg_HELP_MSG_R>:
   1e30c:	52 3d 44 75 6d 70 20 52 41 4d 00                    R=Dump RAM.

0001e317 <gTextMsg_HELP_MSG_V>:
   1e317:	56 3d 73 68 6f 77 20 69 6e 74 65 72 72 75 70 74     V=show interrupt
   1e327:	20 56 65 63 74 6f 72 73 00                           Vectors.

0001e330 <gTextMsg_HELP_MSG_Y>:
   1e330:	59 3d 50 6f 72 74 20 62 6c 69 6e 6b 00              Y=Port blink.

0001e33d <gTextMsg_END>:
   1e33d:	2a 00                                               *.

0001e33f <gAvrInt_RESET>:
   1e33f:	52 45 53 45 54 00                                   RESET.

0001e345 <gAvrInt_INT0>:
   1e345:	49 4e 54 30 00                                      INT0.

0001e34a <gAvrInt_INT1>:
   1e34a:	49 4e 54 31 00                                      INT1.

0001e34f <gAvrInt_INT2>:
   1e34f:	49 4e 54 32 00                                      INT2.

0001e354 <gAvrInt_INT3>:
   1e354:	49 4e 54 33 00                                      INT3.

0001e359 <gAvrInt_INT4>:
   1e359:	49 4e 54 34 00                                      INT4.

0001e35e <gAvrInt_INT5>:
   1e35e:	49 4e 54 35 00                                      INT5.

0001e363 <gAvrInt_INT6>:
   1e363:	49 4e 54 36 00                                      INT6.

0001e368 <gAvrInt_INT7>:
   1e368:	49 4e 54 37 00                                      INT7.

0001e36d <gAvrInt_PCINT0>:
   1e36d:	50 43 49 4e 54 30 00                                PCINT0.

0001e374 <gAvrInt_PCINT1>:
   1e374:	50 43 49 4e 54 31 00                                PCINT1.

0001e37b <gAvrInt_PCINT2>:
   1e37b:	50 43 49 4e 54 32 00                                PCINT2.

0001e382 <gAvrInt_WDT>:
   1e382:	57 44 54 00                                         WDT.

0001e386 <gAvrInt_TIMER0_COMPA>:
   1e386:	54 49 4d 45 52 30 20 43 4f 4d 50 41 00              TIMER0 COMPA.

0001e393 <gAvrInt_TIMER0_COMPB>:
   1e393:	54 49 4d 45 52 30 20 43 4f 4d 50 42 00              TIMER0 COMPB.

0001e3a0 <gAvrInt_TIMER0_OVF>:
   1e3a0:	54 49 4d 45 52 30 20 4f 56 46 00                    TIMER0 OVF.

0001e3ab <gAvrInt_TIMER1_CAPT>:
   1e3ab:	54 49 4d 45 52 31 20 43 41 50 54 00                 TIMER1 CAPT.

0001e3b7 <gAvrInt_TIMER1_COMPA>:
   1e3b7:	54 49 4d 45 52 31 20 43 4f 4d 50 41 00              TIMER1 COMPA.

0001e3c4 <gAvrInt_TIMER1_COMPB>:
   1e3c4:	54 49 4d 45 52 31 20 43 4f 4d 50 42 00              TIMER1 COMPB.

0001e3d1 <gAvrInt_TIMER1_COMPC>:
   1e3d1:	54 49 4d 45 52 31 20 43 4f 4d 50 43 00              TIMER1 COMPC.

0001e3de <gAvrInt_TIMER1_OVF>:
   1e3de:	54 49 4d 45 52 31 20 4f 56 46 00                    TIMER1 OVF.

0001e3e9 <gAvrInt_TIMER2_COMPA>:
   1e3e9:	54 49 4d 45 52 32 20 43 4f 4d 50 41 00              TIMER2 COMPA.

0001e3f6 <gAvrInt_TIMER2_COMPB>:
   1e3f6:	54 49 4d 45 52 32 20 43 4f 4d 50 42 00              TIMER2 COMPB.

0001e403 <gAvrInt_TIMER2_OVF>:
   1e403:	54 49 4d 45 52 32 20 4f 56 46 00                    TIMER2 OVF.

0001e40e <gAvrInt_TIMER3_CAPT>:
   1e40e:	54 49 4d 45 52 33 20 43 41 50 54 00                 TIMER3 CAPT.

0001e41a <gAvrInt_TIMER3_COMPA>:
   1e41a:	54 49 4d 45 52 33 20 43 4f 4d 50 41 00              TIMER3 COMPA.

0001e427 <gAvrInt_TIMER3_COMPB>:
   1e427:	54 49 4d 45 52 33 20 43 4f 4d 50 42 00              TIMER3 COMPB.

0001e434 <gAvrInt_TIMER3_COMPC>:
   1e434:	54 49 4d 45 52 33 20 43 4f 4d 50 43 00              TIMER3 COMPC.

0001e441 <gAvrInt_TIMER3_OVF>:
   1e441:	54 49 4d 45 52 33 20 4f 56 46 00                    TIMER3 OVF.

0001e44c <gAvrInt_TIMER4_CAPT>:
   1e44c:	54 49 4d 45 52 34 20 43 41 50 54 00                 TIMER4 CAPT.

0001e458 <gAvrInt_TIMER4_COMPA>:
   1e458:	54 49 4d 45 52 34 20 43 4f 4d 50 41 00              TIMER4 COMPA.

0001e465 <gAvrInt_TIMER4_COMPB>:
   1e465:	54 49 4d 45 52 34 20 43 4f 4d 50 42 00              TIMER4 COMPB.

0001e472 <gAvrInt_TIMER4_COMPC>:
   1e472:	54 49 4d 45 52 34 20 43 4f 4d 50 43 00              TIMER4 COMPC.

0001e47f <gAvrInt_TIMER4_OVF>:
   1e47f:	54 49 4d 45 52 34 20 4f 56 46 00                    TIMER4 OVF.

0001e48a <gAvrInt_TIMER5_CAPT>:
   1e48a:	54 49 4d 45 52 35 20 43 41 50 54 00                 TIMER5 CAPT.

0001e496 <gAvrInt_TIMER5_COMPA>:
   1e496:	54 49 4d 45 52 35 20 43 4f 4d 50 41 00              TIMER5 COMPA.

0001e4a3 <gAvrInt_TIMER5_COMPB>:
   1e4a3:	54 49 4d 45 52 35 20 43 4f 4d 50 42 00              TIMER5 COMPB.

0001e4b0 <gAvrInt_TIMER5_COMPC>:
   1e4b0:	54 49 4d 45 52 35 20 43 4f 4d 50 43 00              TIMER5 COMPC.

0001e4bd <gAvrInt_TIMER5_OVF>:
   1e4bd:	54 49 4d 45 52 35 20 4f 56 46 00                    TIMER5 OVF.

0001e4c8 <gAvrInt_USART0_RX>:
   1e4c8:	55 53 41 52 54 30 20 52 58 00                       USART0 RX.

0001e4d2 <gAvrInt_USART0_UDRE>:
   1e4d2:	55 53 41 52 54 30 20 55 44 52 45 00                 USART0 UDRE.

0001e4de <gAvrInt_USART0_TX>:
   1e4de:	55 53 41 52 54 30 20 54 58 00                       USART0 TX.

0001e4e8 <gAvrInt_USART1_RX>:
   1e4e8:	55 53 41 52 54 31 20 52 58 00                       USART1 RX.

0001e4f2 <gAvrInt_USART1_UDRE>:
   1e4f2:	55 53 41 52 54 31 20 55 44 52 45 00                 USART1 UDRE.

0001e4fe <gAvrInt_USART1_TX>:
   1e4fe:	55 53 41 52 54 31 20 54 58 00                       USART1 TX.

0001e508 <gAvrInt_USART2_RX>:
   1e508:	55 53 41 52 54 32 20 52 58 00                       USART2 RX.

0001e512 <gAvrInt_USART2_UDRE>:
   1e512:	55 53 41 52 54 32 20 55 44 52 45 00                 USART2 UDRE.

0001e51e <gAvrInt_USART2_TX>:
   1e51e:	55 53 41 52 54 32 20 54 58 00                       USART2 TX.

0001e528 <gAvrInt_USART3_RX>:
   1e528:	55 53 41 52 54 33 20 52 58 00                       USART3 RX.

0001e532 <gAvrInt_USART3_UDRE>:
   1e532:	55 53 41 52 54 33 20 55 44 52 45 00                 USART3 UDRE.

0001e53e <gAvrInt_USART3_TX>:
   1e53e:	55 53 41 52 54 33 20 54 58 00                       USART3 TX.

0001e548 <gAvrInt_SPI_STC>:
   1e548:	53 50 49 20 53 54 43 00                             SPI STC.

0001e550 <gAvrInt_ADC>:
   1e550:	41 44 43 00                                         ADC.

0001e554 <gAvrInt_ANALOG_COMP>:
   1e554:	41 4e 41 4c 4f 47 20 43 4f 4d 50 00                 ANALOG COMP.

0001e560 <gAvrInt_EE_READY>:
   1e560:	45 45 20 52 45 41 44 59 00                          EE READY.

0001e569 <gAvrInt_TWI>:
   1e569:	54 57 49 00                                         TWI.

0001e56d <gAvrInt_SPM_READY>:
   1e56d:	53 50 4d 20 52 45 41 44 59 00                       SPM READY.

0001e577 <gAvrInt_END>:
   1e577:	2a 00                                               *.

0001e579 <gInterruptNameTable>:
   1e579:	3f e3 45 e3 4a e3 4f e3 54 e3 59 e3 5e e3 63 e3     ?.E.J.O.T.Y.^.c.
   1e589:	68 e3 6d e3 74 e3 7b e3 82 e3 e9 e3 f6 e3 03 e4     h.m.t.{.........
   1e599:	ab e3 b7 e3 c4 e3 d1 e3 de e3 86 e3 93 e3 a0 e3     ................
   1e5a9:	48 e5 c8 e4 d2 e4 de e4 54 e5 50 e5 60 e5 0e e4     H.......T.P.`...
   1e5b9:	1a e4 27 e4 34 e4 41 e4 e8 e4 f2 e4 fe e4 69 e5     ..'.4.A.......i.
   1e5c9:	6d e5 4c e4 58 e4 65 e4 72 e4 7f e4 8a e4 96 e4     m.L.X.e.r.......
   1e5d9:	a3 e4 b0 e4 bd e4 08 e5 12 e5 1e e5 28 e5 32 e5     ............(.2.
   1e5e9:	3e e5 00                                            >..

0001e5ec <__ctors_end>:
   1e5ec:	11 24       	eor	r1, r1
   1e5ee:	1f be       	out	0x3f, r1	; 63
   1e5f0:	cf ef       	ldi	r28, 0xFF	; 255
   1e5f2:	d1 e2       	ldi	r29, 0x21	; 33
   1e5f4:	de bf       	out	0x3e, r29	; 62
   1e5f6:	cd bf       	out	0x3d, r28	; 61

0001e5f8 <__do_copy_data>:
   1e5f8:	12 e0       	ldi	r17, 0x02	; 2
   1e5fa:	a0 e0       	ldi	r26, 0x00	; 0
   1e5fc:	b2 e0       	ldi	r27, 0x02	; 2
   1e5fe:	e6 ed       	ldi	r30, 0xD6	; 214
   1e600:	ff ef       	ldi	r31, 0xFF	; 255
   1e602:	01 e0       	ldi	r16, 0x01	; 1
   1e604:	0b bf       	out	0x3b, r16	; 59
   1e606:	02 c0       	rjmp	.+4      	; 0x1e60c <__do_copy_data+0x14>
   1e608:	07 90       	elpm	r0, Z+
   1e60a:	0d 92       	st	X+, r0
   1e60c:	a0 30       	cpi	r26, 0x00	; 0
   1e60e:	b1 07       	cpc	r27, r17
   1e610:	d9 f7       	brne	.-10     	; 0x1e608 <__do_copy_data+0x10>

0001e612 <__do_clear_bss>:
   1e612:	12 e0       	ldi	r17, 0x02	; 2
   1e614:	a0 e0       	ldi	r26, 0x00	; 0
   1e616:	b2 e0       	ldi	r27, 0x02	; 2
   1e618:	01 c0       	rjmp	.+2      	; 0x1e61c <.do_clear_bss_start>

0001e61a <.do_clear_bss_loop>:
   1e61a:	1d 92       	st	X+, r1

0001e61c <.do_clear_bss_start>:
   1e61c:	ac 30       	cpi	r26, 0x0C	; 12
   1e61e:	b1 07       	cpc	r27, r17
   1e620:	e1 f7       	brne	.-8      	; 0x1e61a <.do_clear_bss_loop>
   1e622:	0e 94 f9 f4 	call	0x1e9f2	; 0x1e9f2 <main>
   1e626:	0c 94 e9 ff 	jmp	0x1ffd2	; 0x1ffd2 <_exit>

0001e62a <__jumpMain>:
//#define	SPH_REG	0x3E
//#define	SPL_REG	0x3D

//*****************************************************************************
void __jumpMain(void)
{
   1e62a:	01 e2       	ldi	r16, 0x21	; 33

//	asm volatile ( "ldi	16, 0x10");
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
//	asm volatile ( "out 0x3E,16");
//	asm volatile ( "out %0,16" :: "i" (SPH_REG) );
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   1e62c:	0e bf       	out	0x3e, r16	; 62

//	asm volatile ( "ldi	16, 0x00");
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   1e62e:	0f ef       	ldi	r16, 0xFF	; 255
//	asm volatile ( "out 0x3d,16");
//	asm volatile ( "out %0,16" :: "i" (SPL_REG) );
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   1e630:	0d bf       	out	0x3d, r16	; 61



	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   1e632:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   1e634:	1f be       	out	0x3f, r1	; 63
//	asm volatile ( "rjmp main");											// jump to main()
	asm volatile ( "jmp main");												// jump to main()
   1e636:	0c 94 f9 f4 	jmp	0x1e9f2	; 0x1e9f2 <main>

0001e63a <__bad_interrupt>:
   1e63a:	0c 94 00 f0 	jmp	0x1e000	; 0x1e000 <__vectors>

0001e63e <delay_ms>:
}


//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
   1e63e:	20 e0       	ldi	r18, 0x00	; 0
   1e640:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   1e642:	40 ed       	ldi	r20, 0xD0	; 208
   1e644:	57 e0       	ldi	r21, 0x07	; 7
   1e646:	05 c0       	rjmp	.+10     	; 0x1e652 <delay_ms+0x14>
   1e648:	fa 01       	movw	r30, r20
   1e64a:	31 97       	sbiw	r30, 0x01	; 1
   1e64c:	f1 f7       	brne	.-4      	; 0x1e64a <delay_ms+0xc>
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1e64e:	2f 5f       	subi	r18, 0xFF	; 255
   1e650:	3f 4f       	sbci	r19, 0xFF	; 255
   1e652:	28 17       	cp	r18, r24
   1e654:	39 07       	cpc	r19, r25
   1e656:	c0 f3       	brcs	.-16     	; 0x1e648 <delay_ms+0xa>
	{
		_delay_ms(0.5);
	}
}
   1e658:	08 95       	ret

0001e65a <PrintFromPROGMEM>:
	ii			=	offset;
	theChar		=	1;

	while (theChar != 0)
	{
		theChar	=	pgm_read_byte_far((uint32_t)dataPtr + ii);
   1e65a:	9c 01       	movw	r18, r24
   1e65c:	44 27       	eor	r20, r20
   1e65e:	37 fd       	sbrc	r19, 7
   1e660:	40 95       	com	r20
   1e662:	54 2f       	mov	r21, r20
   1e664:	da 01       	movw	r26, r20
   1e666:	c9 01       	movw	r24, r18
   1e668:	86 0f       	add	r24, r22
   1e66a:	91 1d       	adc	r25, r1
   1e66c:	a1 1d       	adc	r26, r1
   1e66e:	b1 1d       	adc	r27, r1
   1e670:	ab bf       	out	0x3b, r26	; 59
   1e672:	fc 01       	movw	r30, r24
   1e674:	87 91       	elpm	r24, Z+
		if (theChar != 0)
   1e676:	88 23       	and	r24, r24
   1e678:	69 f0       	breq	.+26     	; 0x1e694 <PrintFromPROGMEM+0x3a>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e67a:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e67e:	80 91 c0 00 	lds	r24, 0x00C0
   1e682:	86 ff       	sbrs	r24, 6
   1e684:	fc cf       	rjmp	.-8      	; 0x1e67e <PrintFromPROGMEM+0x24>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e686:	80 91 c0 00 	lds	r24, 0x00C0
   1e68a:	80 64       	ori	r24, 0x40	; 64
   1e68c:	80 93 c0 00 	sts	0x00C0, r24
		theChar	=	pgm_read_byte_far((uint32_t)dataPtr + ii);
		if (theChar != 0)
		{
			sendchar(theChar);
		}
		ii++;
   1e690:	6f 5f       	subi	r22, 0xFF	; 255
   1e692:	e8 cf       	rjmp	.-48     	; 0x1e664 <PrintFromPROGMEM+0xa>
   1e694:	08 95       	ret

0001e696 <PrintNewLine>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e696:	8d e0       	ldi	r24, 0x0D	; 13
   1e698:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e69c:	80 91 c0 00 	lds	r24, 0x00C0
   1e6a0:	86 ff       	sbrs	r24, 6
   1e6a2:	fc cf       	rjmp	.-8      	; 0x1e69c <PrintNewLine+0x6>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e6a4:	80 91 c0 00 	lds	r24, 0x00C0
   1e6a8:	80 64       	ori	r24, 0x40	; 64
   1e6aa:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e6ae:	8a e0       	ldi	r24, 0x0A	; 10
   1e6b0:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e6b4:	80 91 c0 00 	lds	r24, 0x00C0
   1e6b8:	86 ff       	sbrs	r24, 6
   1e6ba:	fc cf       	rjmp	.-8      	; 0x1e6b4 <PrintNewLine+0x1e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e6bc:	80 91 c0 00 	lds	r24, 0x00C0
   1e6c0:	80 64       	ori	r24, 0x40	; 64
   1e6c2:	80 93 c0 00 	sts	0x00C0, r24
//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
	sendchar(0x0a);
}
   1e6c6:	08 95       	ret

0001e6c8 <PrintFromPROGMEMln>:


//************************************************************************
void	PrintFromPROGMEMln(void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   1e6c8:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>

	PrintNewLine();
   1e6cc:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
}
   1e6d0:	08 95       	ret

0001e6d2 <PrintString>:


//************************************************************************
void	PrintString(char *textString)
{
   1e6d2:	fc 01       	movw	r30, r24

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
	{
		theChar	=	textString[ii];
   1e6d4:	90 81       	ld	r25, Z
		if (theChar != 0)
   1e6d6:	99 23       	and	r25, r25
   1e6d8:	59 f0       	breq	.+22     	; 0x1e6f0 <PrintString+0x1e>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e6da:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e6de:	80 91 c0 00 	lds	r24, 0x00C0
   1e6e2:	86 ff       	sbrs	r24, 6
   1e6e4:	fc cf       	rjmp	.-8      	; 0x1e6de <PrintString+0xc>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e6e6:	80 91 c0 00 	lds	r24, 0x00C0
   1e6ea:	80 64       	ori	r24, 0x40	; 64
   1e6ec:	80 93 c0 00 	sts	0x00C0, r24
   1e6f0:	31 96       	adiw	r30, 0x01	; 1
char	theChar;
int		ii;

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
   1e6f2:	99 23       	and	r25, r25
   1e6f4:	79 f7       	brne	.-34     	; 0x1e6d4 <PrintString+0x2>
		{
			sendchar(theChar);
		}
		ii++;
	}
}
   1e6f6:	08 95       	ret

0001e6f8 <PrintHexByte>:

//************************************************************************
void	PrintHexByte(unsigned char theByte)
{
   1e6f8:	28 2f       	mov	r18, r24
char	theChar;

	theChar	=	0x30 + ((theByte >> 4) & 0x0f);
   1e6fa:	98 2f       	mov	r25, r24
   1e6fc:	92 95       	swap	r25
   1e6fe:	9f 70       	andi	r25, 0x0F	; 15
   1e700:	89 2f       	mov	r24, r25
   1e702:	80 5d       	subi	r24, 0xD0	; 208
	if (theChar > 0x39)
   1e704:	8a 33       	cpi	r24, 0x3A	; 58
   1e706:	08 f0       	brcs	.+2      	; 0x1e70a <PrintHexByte+0x12>
	{
		theChar	+=	7;
   1e708:	89 5f       	subi	r24, 0xF9	; 249
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e70a:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e70e:	80 91 c0 00 	lds	r24, 0x00C0
   1e712:	86 ff       	sbrs	r24, 6
   1e714:	fc cf       	rjmp	.-8      	; 0x1e70e <PrintHexByte+0x16>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e716:	80 91 c0 00 	lds	r24, 0x00C0
   1e71a:	80 64       	ori	r24, 0x40	; 64
   1e71c:	80 93 c0 00 	sts	0x00C0, r24
	{
		theChar	+=	7;
	}
	sendchar(theChar );

	theChar	=	0x30 + (theByte & 0x0f);
   1e720:	82 2f       	mov	r24, r18
   1e722:	8f 70       	andi	r24, 0x0F	; 15
   1e724:	98 2f       	mov	r25, r24
   1e726:	90 5d       	subi	r25, 0xD0	; 208
	if (theChar > 0x39)
   1e728:	9a 33       	cpi	r25, 0x3A	; 58
   1e72a:	08 f0       	brcs	.+2      	; 0x1e72e <PrintHexByte+0x36>
	{
		theChar	+=	7;
   1e72c:	99 5f       	subi	r25, 0xF9	; 249
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e72e:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e732:	80 91 c0 00 	lds	r24, 0x00C0
   1e736:	86 ff       	sbrs	r24, 6
   1e738:	fc cf       	rjmp	.-8      	; 0x1e732 <PrintHexByte+0x3a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e73a:	80 91 c0 00 	lds	r24, 0x00C0
   1e73e:	80 64       	ori	r24, 0x40	; 64
   1e740:	80 93 c0 00 	sts	0x00C0, r24
	if (theChar > 0x39)
	{
		theChar	+=	7;
	}
	sendchar(theChar );
}
   1e744:	08 95       	ret

0001e746 <PrintDecInt>:

//************************************************************************
void	PrintDecInt(int theNumber, int digitCnt)
{
   1e746:	9c 01       	movw	r18, r24
   1e748:	fb 01       	movw	r30, r22
int	theChar;
int	myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   1e74a:	85 36       	cpi	r24, 0x65	; 101
   1e74c:	91 05       	cpc	r25, r1
   1e74e:	1c f4       	brge	.+6      	; 0x1e756 <PrintDecInt+0x10>
   1e750:	63 30       	cpi	r22, 0x03	; 3
   1e752:	71 05       	cpc	r23, r1
   1e754:	94 f0       	brlt	.+36     	; 0x1e77a <PrintDecInt+0x34>
	{
		theChar		=	0x30 + myNumber / 100;
		sendchar(theChar );
   1e756:	c9 01       	movw	r24, r18
   1e758:	64 e6       	ldi	r22, 0x64	; 100
   1e75a:	70 e0       	ldi	r23, 0x00	; 0
   1e75c:	0e 94 8a ff 	call	0x1ff14	; 0x1ff14 <__divmodhi4>
   1e760:	60 5d       	subi	r22, 0xD0	; 208
   1e762:	7f 4f       	sbci	r23, 0xFF	; 255
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e764:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e768:	80 91 c0 00 	lds	r24, 0x00C0
   1e76c:	86 ff       	sbrs	r24, 6
   1e76e:	fc cf       	rjmp	.-8      	; 0x1e768 <PrintDecInt+0x22>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e770:	80 91 c0 00 	lds	r24, 0x00C0
   1e774:	80 64       	ori	r24, 0x40	; 64
   1e776:	80 93 c0 00 	sts	0x00C0, r24
	{
		theChar		=	0x30 + myNumber / 100;
		sendchar(theChar );
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   1e77a:	2b 30       	cpi	r18, 0x0B	; 11
   1e77c:	31 05       	cpc	r19, r1
   1e77e:	14 f4       	brge	.+4      	; 0x1e784 <PrintDecInt+0x3e>
   1e780:	32 97       	sbiw	r30, 0x02	; 2
   1e782:	b4 f0       	brlt	.+44     	; 0x1e7b0 <PrintDecInt+0x6a>
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
   1e784:	c9 01       	movw	r24, r18
   1e786:	64 e6       	ldi	r22, 0x64	; 100
   1e788:	70 e0       	ldi	r23, 0x00	; 0
   1e78a:	0e 94 8a ff 	call	0x1ff14	; 0x1ff14 <__divmodhi4>
   1e78e:	6a e0       	ldi	r22, 0x0A	; 10
   1e790:	70 e0       	ldi	r23, 0x00	; 0
   1e792:	0e 94 8a ff 	call	0x1ff14	; 0x1ff14 <__divmodhi4>
   1e796:	60 5d       	subi	r22, 0xD0	; 208
   1e798:	7f 4f       	sbci	r23, 0xFF	; 255
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e79a:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e79e:	80 91 c0 00 	lds	r24, 0x00C0
   1e7a2:	86 ff       	sbrs	r24, 6
   1e7a4:	fc cf       	rjmp	.-8      	; 0x1e79e <PrintDecInt+0x58>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e7a6:	80 91 c0 00 	lds	r24, 0x00C0
   1e7aa:	80 64       	ori	r24, 0x40	; 64
   1e7ac:	80 93 c0 00 	sts	0x00C0, r24
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
	}
	theChar	=	0x30 + (myNumber % 10);
	sendchar(theChar );
   1e7b0:	c9 01       	movw	r24, r18
   1e7b2:	6a e0       	ldi	r22, 0x0A	; 10
   1e7b4:	70 e0       	ldi	r23, 0x00	; 0
   1e7b6:	0e 94 8a ff 	call	0x1ff14	; 0x1ff14 <__divmodhi4>
   1e7ba:	c0 96       	adiw	r24, 0x30	; 48
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e7bc:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e7c0:	80 91 c0 00 	lds	r24, 0x00C0
   1e7c4:	86 ff       	sbrs	r24, 6
   1e7c6:	fc cf       	rjmp	.-8      	; 0x1e7c0 <PrintDecInt+0x7a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e7c8:	80 91 c0 00 	lds	r24, 0x00C0
   1e7cc:	80 64       	ori	r24, 0x40	; 64
   1e7ce:	80 93 c0 00 	sts	0x00C0, r24
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
	}
	theChar	=	0x30 + (myNumber % 10);
	sendchar(theChar );
}
   1e7d2:	08 95       	ret

0001e7d4 <analogRead>:

	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
//	ADMUX	=	(analog_reference << 6) | (pin & 0x07);
	ADMUX	=	(1 << 6) | (pin & 0x07);
   1e7d4:	28 2f       	mov	r18, r24
   1e7d6:	27 70       	andi	r18, 0x07	; 7
   1e7d8:	20 64       	ori	r18, 0x40	; 64
   1e7da:	20 93 7c 00 	sts	0x007C, r18

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB	=	(ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
   1e7de:	20 91 7b 00 	lds	r18, 0x007B
   1e7e2:	86 95       	lsr	r24
   1e7e4:	86 95       	lsr	r24
   1e7e6:	86 95       	lsr	r24
   1e7e8:	90 e0       	ldi	r25, 0x00	; 0
   1e7ea:	81 70       	andi	r24, 0x01	; 1
   1e7ec:	90 70       	andi	r25, 0x00	; 0
   1e7ee:	33 e0       	ldi	r19, 0x03	; 3
   1e7f0:	88 0f       	add	r24, r24
   1e7f2:	99 1f       	adc	r25, r25
   1e7f4:	3a 95       	dec	r19
   1e7f6:	e1 f7       	brne	.-8      	; 0x1e7f0 <analogRead+0x1c>
   1e7f8:	27 7f       	andi	r18, 0xF7	; 247
   1e7fa:	28 2b       	or	r18, r24
   1e7fc:	20 93 7b 00 	sts	0x007B, r18

	// without a delay, we seem to read from the wrong channel
	//delay(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
   1e800:	80 91 7a 00 	lds	r24, 0x007A
   1e804:	80 64       	ori	r24, 0x40	; 64
   1e806:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
   1e80a:	80 91 7a 00 	lds	r24, 0x007A
   1e80e:	86 fd       	sbrc	r24, 6
   1e810:	fc cf       	rjmp	.-8      	; 0x1e80a <analogRead+0x36>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low		=	ADCL;
   1e812:	20 91 78 00 	lds	r18, 0x0078
	high	=	ADCH;
   1e816:	40 91 79 00 	lds	r20, 0x0079
   1e81a:	94 2f       	mov	r25, r20
   1e81c:	80 e0       	ldi	r24, 0x00	; 0
   1e81e:	30 e0       	ldi	r19, 0x00	; 0
   1e820:	28 2b       	or	r18, r24
   1e822:	39 2b       	or	r19, r25

	// combine the two bytes
	return (high << 8) | low;
}
   1e824:	c9 01       	movw	r24, r18
   1e826:	08 95       	ret

0001e828 <PrintAvailablePort>:
	}
}

//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
   1e828:	1f 93       	push	r17
   1e82a:	18 2f       	mov	r17, r24
	PrintFromPROGMEM(gTextMsg_PORT, 0);
   1e82c:	80 e8       	ldi	r24, 0x80	; 128
   1e82e:	92 ee       	ldi	r25, 0xE2	; 226
   1e830:	60 e0       	ldi	r22, 0x00	; 0
   1e832:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e836:	10 93 c6 00 	sts	0x00C6, r17
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e83a:	80 91 c0 00 	lds	r24, 0x00C0
   1e83e:	86 ff       	sbrs	r24, 6
   1e840:	fc cf       	rjmp	.-8      	; 0x1e83a <PrintAvailablePort+0x12>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e842:	80 91 c0 00 	lds	r24, 0x00C0
   1e846:	80 64       	ori	r24, 0x40	; 64
   1e848:	80 93 c0 00 	sts	0x00C0, r24
//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
	PrintFromPROGMEM(gTextMsg_PORT, 0);
	sendchar(thePortLetter);
	PrintNewLine();
   1e84c:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
}
   1e850:	1f 91       	pop	r17
   1e852:	08 95       	ret

0001e854 <DumpHex>:
	kDUMP_RAM
};

//************************************************************************
static void	DumpHex(unsigned char dumpWhat, unsigned long startAddress, unsigned char numRows)
{
   1e854:	2f 92       	push	r2
   1e856:	3f 92       	push	r3
   1e858:	4f 92       	push	r4
   1e85a:	5f 92       	push	r5
   1e85c:	6f 92       	push	r6
   1e85e:	7f 92       	push	r7
   1e860:	8f 92       	push	r8
   1e862:	9f 92       	push	r9
   1e864:	af 92       	push	r10
   1e866:	bf 92       	push	r11
   1e868:	cf 92       	push	r12
   1e86a:	df 92       	push	r13
   1e86c:	ef 92       	push	r14
   1e86e:	ff 92       	push	r15
   1e870:	0f 93       	push	r16
   1e872:	1f 93       	push	r17
   1e874:	df 93       	push	r29
   1e876:	cf 93       	push	r28
   1e878:	cd b7       	in	r28, 0x3d	; 61
   1e87a:	de b7       	in	r29, 0x3e	; 62
   1e87c:	62 97       	sbiw	r28, 0x12	; 18
   1e87e:	0f b6       	in	r0, 0x3f	; 63
   1e880:	f8 94       	cli
   1e882:	de bf       	out	0x3e, r29	; 62
   1e884:	0f be       	out	0x3f, r0	; 63
   1e886:	cd bf       	out	0x3d, r28	; 61
   1e888:	38 2e       	mov	r3, r24
   1e88a:	62 2e       	mov	r6, r18
   1e88c:	ca 01       	movw	r24, r20
   1e88e:	db 01       	movw	r26, r22
   1e890:	5c 01       	movw	r10, r24
   1e892:	6d 01       	movw	r12, r26
   1e894:	77 24       	eor	r7, r7
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e896:	60 e2       	ldi	r22, 0x20	; 32
   1e898:	26 2e       	mov	r2, r22
   1e89a:	2e 01       	movw	r4, r28
   1e89c:	08 94       	sec
   1e89e:	41 1c       	adc	r4, r1
   1e8a0:	51 1c       	adc	r5, r1
   1e8a2:	8b c0       	rjmp	.+278    	; 0x1e9ba <DumpHex+0x166>
	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
	{
		if (myAddressPointer > 0x10000)
   1e8a4:	81 e0       	ldi	r24, 0x01	; 1
   1e8a6:	a8 16       	cp	r10, r24
   1e8a8:	80 e0       	ldi	r24, 0x00	; 0
   1e8aa:	b8 06       	cpc	r11, r24
   1e8ac:	81 e0       	ldi	r24, 0x01	; 1
   1e8ae:	c8 06       	cpc	r12, r24
   1e8b0:	80 e0       	ldi	r24, 0x00	; 0
   1e8b2:	d8 06       	cpc	r13, r24
   1e8b4:	28 f0       	brcs	.+10     	; 0x1e8c0 <DumpHex+0x6c>
		{
			PrintHexByte((myAddressPointer >> 16) & 0x00ff);
   1e8b6:	c6 01       	movw	r24, r12
   1e8b8:	aa 27       	eor	r26, r26
   1e8ba:	bb 27       	eor	r27, r27
   1e8bc:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
		}
		PrintHexByte((myAddressPointer >> 8) & 0x00ff);
   1e8c0:	bb 27       	eor	r27, r27
   1e8c2:	ad 2d       	mov	r26, r13
   1e8c4:	9c 2d       	mov	r25, r12
   1e8c6:	8b 2d       	mov	r24, r11
   1e8c8:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
		PrintHexByte(myAddressPointer & 0x00ff);
   1e8cc:	8a 2d       	mov	r24, r10
   1e8ce:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e8d2:	20 92 c6 00 	sts	0x00C6, r2
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e8d6:	80 91 c0 00 	lds	r24, 0x00C0
   1e8da:	86 ff       	sbrs	r24, 6
   1e8dc:	fc cf       	rjmp	.-8      	; 0x1e8d6 <DumpHex+0x82>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e8de:	80 91 c0 00 	lds	r24, 0x00C0
   1e8e2:	80 64       	ori	r24, 0x40	; 64
   1e8e4:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e8e8:	9d e2       	ldi	r25, 0x2D	; 45
   1e8ea:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e8ee:	80 91 c0 00 	lds	r24, 0x00C0
   1e8f2:	86 ff       	sbrs	r24, 6
   1e8f4:	fc cf       	rjmp	.-8      	; 0x1e8ee <DumpHex+0x9a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e8f6:	80 91 c0 00 	lds	r24, 0x00C0
   1e8fa:	80 64       	ori	r24, 0x40	; 64
   1e8fc:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e900:	20 92 c6 00 	sts	0x00C6, r2
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e904:	80 91 c0 00 	lds	r24, 0x00C0
   1e908:	86 ff       	sbrs	r24, 6
   1e90a:	fc cf       	rjmp	.-8      	; 0x1e904 <DumpHex+0xb0>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e90c:	80 91 c0 00 	lds	r24, 0x00C0
   1e910:	80 64       	ori	r24, 0x40	; 64
   1e912:	80 93 c0 00 	sts	0x00C0, r24
		PrintHexByte(myAddressPointer & 0x00ff);
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
   1e916:	19 82       	std	Y+1, r1	; 0x01
   1e918:	86 01       	movw	r16, r12
   1e91a:	75 01       	movw	r14, r10
   1e91c:	88 24       	eor	r8, r8
   1e91e:	99 24       	eor	r9, r9
		for (ii=0; ii<16; ii++)
		{
			switch(dumpWhat)
   1e920:	a1 e0       	ldi	r26, 0x01	; 1
   1e922:	3a 16       	cp	r3, r26
   1e924:	51 f0       	breq	.+20     	; 0x1e93a <DumpHex+0xe6>
   1e926:	3a 16       	cp	r3, r26
   1e928:	20 f0       	brcs	.+8      	; 0x1e932 <DumpHex+0xde>
   1e92a:	b2 e0       	ldi	r27, 0x02	; 2
   1e92c:	3b 16       	cp	r3, r27
   1e92e:	61 f4       	brne	.+24     	; 0x1e948 <DumpHex+0xf4>
   1e930:	09 c0       	rjmp	.+18     	; 0x1e944 <DumpHex+0xf0>
			{
				case kDUMP_FLASH:
					theValue	=	pgm_read_byte_far(myAddressPointer);
   1e932:	0b bf       	out	0x3b, r16	; 59
   1e934:	f7 01       	movw	r30, r14
   1e936:	77 90       	elpm	r7, Z+
   1e938:	07 c0       	rjmp	.+14     	; 0x1e948 <DumpHex+0xf4>
					break;

				case kDUMP_EEPROM:
					theValue	=	eeprom_read_byte((void *)myAddressPointer);
   1e93a:	c7 01       	movw	r24, r14
   1e93c:	0e 94 d3 ff 	call	0x1ffa6	; 0x1ffa6 <__eerd_byte_m1280>
   1e940:	78 2e       	mov	r7, r24
   1e942:	02 c0       	rjmp	.+4      	; 0x1e948 <DumpHex+0xf4>
					break;

				case kDUMP_RAM:
					theValue	=	ramPtr[myAddressPointer];
   1e944:	f7 01       	movw	r30, r14
   1e946:	70 80       	ld	r7, Z
					break;

			}
			PrintHexByte(theValue);
   1e948:	87 2d       	mov	r24, r7
   1e94a:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e94e:	20 92 c6 00 	sts	0x00C6, r2
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1e952:	80 91 c0 00 	lds	r24, 0x00C0
   1e956:	86 ff       	sbrs	r24, 6
   1e958:	fc cf       	rjmp	.-8      	; 0x1e952 <DumpHex+0xfe>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1e95a:	80 91 c0 00 	lds	r24, 0x00C0
   1e95e:	80 64       	ori	r24, 0x40	; 64
   1e960:	80 93 c0 00 	sts	0x00C0, r24
					break;

			}
			PrintHexByte(theValue);
			sendchar(0x20);
			if ((theValue >= 0x20) && (theValue < 0x7f))
   1e964:	87 2d       	mov	r24, r7
   1e966:	80 52       	subi	r24, 0x20	; 32
   1e968:	f4 01       	movw	r30, r8
   1e96a:	ef 70       	andi	r30, 0x0F	; 15
   1e96c:	f0 70       	andi	r31, 0x00	; 0
   1e96e:	8f 35       	cpi	r24, 0x5F	; 95
   1e970:	20 f4       	brcc	.+8      	; 0x1e97a <DumpHex+0x126>
			{
				asciiDump[ii % 16]	=	theValue;
   1e972:	e4 0d       	add	r30, r4
   1e974:	f5 1d       	adc	r31, r5
   1e976:	70 82       	st	Z, r7
   1e978:	04 c0       	rjmp	.+8      	; 0x1e982 <DumpHex+0x12e>
			}
			else
			{
				asciiDump[ii % 16]	=	'.';
   1e97a:	e4 0d       	add	r30, r4
   1e97c:	f5 1d       	adc	r31, r5
   1e97e:	8e e2       	ldi	r24, 0x2E	; 46
   1e980:	80 83       	st	Z, r24
			}

			myAddressPointer++;
   1e982:	08 94       	sec
   1e984:	e1 1c       	adc	r14, r1
   1e986:	f1 1c       	adc	r15, r1
   1e988:	01 1d       	adc	r16, r1
   1e98a:	11 1d       	adc	r17, r1
   1e98c:	08 94       	sec
   1e98e:	81 1c       	adc	r8, r1
   1e990:	91 1c       	adc	r9, r1
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
		for (ii=0; ii<16; ii++)
   1e992:	90 e1       	ldi	r25, 0x10	; 16
   1e994:	89 16       	cp	r8, r25
   1e996:	91 04       	cpc	r9, r1
   1e998:	09 f0       	breq	.+2      	; 0x1e99c <DumpHex+0x148>
   1e99a:	c2 cf       	rjmp	.-124    	; 0x1e920 <DumpHex+0xcc>
   1e99c:	80 e1       	ldi	r24, 0x10	; 16
   1e99e:	90 e0       	ldi	r25, 0x00	; 0
   1e9a0:	a0 e0       	ldi	r26, 0x00	; 0
   1e9a2:	b0 e0       	ldi	r27, 0x00	; 0
   1e9a4:	a8 0e       	add	r10, r24
   1e9a6:	b9 1e       	adc	r11, r25
   1e9a8:	ca 1e       	adc	r12, r26
   1e9aa:	db 1e       	adc	r13, r27
				asciiDump[ii % 16]	=	'.';
			}

			myAddressPointer++;
		}
		asciiDump[16]	=	0;
   1e9ac:	19 8a       	std	Y+17, r1	; 0x11
		PrintString(asciiDump);
   1e9ae:	c2 01       	movw	r24, r4
   1e9b0:	0e 94 69 f3 	call	0x1e6d2	; 0x1e6d2 <PrintString>
		PrintNewLine();
   1e9b4:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>

		numRows--;
   1e9b8:	6a 94       	dec	r6


	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
   1e9ba:	66 20       	and	r6, r6
   1e9bc:	09 f0       	breq	.+2      	; 0x1e9c0 <DumpHex+0x16c>
   1e9be:	72 cf       	rjmp	.-284    	; 0x1e8a4 <DumpHex+0x50>
		PrintString(asciiDump);
		PrintNewLine();

		numRows--;
	}
}
   1e9c0:	62 96       	adiw	r28, 0x12	; 18
   1e9c2:	0f b6       	in	r0, 0x3f	; 63
   1e9c4:	f8 94       	cli
   1e9c6:	de bf       	out	0x3e, r29	; 62
   1e9c8:	0f be       	out	0x3f, r0	; 63
   1e9ca:	cd bf       	out	0x3d, r28	; 61
   1e9cc:	cf 91       	pop	r28
   1e9ce:	df 91       	pop	r29
   1e9d0:	1f 91       	pop	r17
   1e9d2:	0f 91       	pop	r16
   1e9d4:	ff 90       	pop	r15
   1e9d6:	ef 90       	pop	r14
   1e9d8:	df 90       	pop	r13
   1e9da:	cf 90       	pop	r12
   1e9dc:	bf 90       	pop	r11
   1e9de:	af 90       	pop	r10
   1e9e0:	9f 90       	pop	r9
   1e9e2:	8f 90       	pop	r8
   1e9e4:	7f 90       	pop	r7
   1e9e6:	6f 90       	pop	r6
   1e9e8:	5f 90       	pop	r5
   1e9ea:	4f 90       	pop	r4
   1e9ec:	3f 90       	pop	r3
   1e9ee:	2f 90       	pop	r2
   1e9f0:	08 95       	ret

0001e9f2 <main>:



//*****************************************************************************
int main(void)
{
   1e9f2:	2f 92       	push	r2
   1e9f4:	3f 92       	push	r3
   1e9f6:	4f 92       	push	r4
   1e9f8:	5f 92       	push	r5
   1e9fa:	6f 92       	push	r6
   1e9fc:	7f 92       	push	r7
   1e9fe:	8f 92       	push	r8
   1ea00:	9f 92       	push	r9
   1ea02:	af 92       	push	r10
   1ea04:	bf 92       	push	r11
   1ea06:	cf 92       	push	r12
   1ea08:	df 92       	push	r13
   1ea0a:	ef 92       	push	r14
   1ea0c:	ff 92       	push	r15
   1ea0e:	0f 93       	push	r16
   1ea10:	1f 93       	push	r17
   1ea12:	df 93       	push	r29
   1ea14:	cf 93       	push	r28
   1ea16:	cd b7       	in	r28, 0x3d	; 61
   1ea18:	de b7       	in	r29, 0x3e	; 62
   1ea1a:	cd 53       	subi	r28, 0x3D	; 61
   1ea1c:	d1 40       	sbci	r29, 0x01	; 1
   1ea1e:	0f b6       	in	r0, 0x3f	; 63
   1ea20:	f8 94       	cli
   1ea22:	de bf       	out	0x3e, r29	; 62
   1ea24:	0f be       	out	0x3f, r0	; 63
   1ea26:	cd bf       	out	0x3d, r28	; 61
	 * Branch to bootloader or application code ?
	 */

#ifndef REMOVE_BOOTLOADER_LED
	/* PROG_PIN pulled low, indicate with LED that bootloader is active */
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   1ea28:	27 9a       	sbi	0x04, 7	; 4
//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   1ea2a:	2f 9a       	sbi	0x05, 7	; 5
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   1ea2c:	80 91 c0 00 	lds	r24, 0x00C0
   1ea30:	82 60       	ori	r24, 0x02	; 2
   1ea32:	80 93 c0 00 	sts	0x00C0, r24
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   1ea36:	80 e1       	ldi	r24, 0x10	; 16
   1ea38:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   1ea3c:	88 e1       	ldi	r24, 0x18	; 24
   1ea3e:	80 93 c1 00 	sts	0x00C1, r24

	asm volatile ("nop");			// wait until port has changed
   1ea42:	00 00       	nop
   1ea44:	ee 24       	eor	r14, r14
   1ea46:	ff 24       	eor	r15, r15
   1ea48:	87 01       	movw	r16, r14
   1ea4a:	b4 e0       	ldi	r27, 0x04	; 4
   1ea4c:	ab 2e       	mov	r10, r27
   1ea4e:	b1 2c       	mov	r11, r1
	sendchar(0x0a);

	delay_ms(100);
#endif

	while (boot_state==0)
   1ea50:	cc 24       	eor	r12, r12
   1ea52:	dd 24       	eor	r13, r13
   1ea54:	24 c0       	rjmp	.+72     	; 0x1ea9e <main+0xac>
   1ea56:	c5 01       	movw	r24, r10
   1ea58:	01 97       	sbiw	r24, 0x01	; 1
   1ea5a:	f1 f7       	brne	.-4      	; 0x1ea58 <main+0x66>
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
		{
			_delay_ms(0.001);
			boot_timer++;
   1ea5c:	08 94       	sec
   1ea5e:	e1 1c       	adc	r14, r1
   1ea60:	f1 1c       	adc	r15, r1
   1ea62:	01 1d       	adc	r16, r1
   1ea64:	11 1d       	adc	r17, r1
   1ea66:	21 e2       	ldi	r18, 0x21	; 33
   1ea68:	e2 16       	cp	r14, r18
   1ea6a:	2e e4       	ldi	r18, 0x4E	; 78
   1ea6c:	f2 06       	cpc	r15, r18
   1ea6e:	20 e0       	ldi	r18, 0x00	; 0
   1ea70:	02 07       	cpc	r16, r18
   1ea72:	20 e0       	ldi	r18, 0x00	; 0
   1ea74:	12 07       	cpc	r17, r18
   1ea76:	18 f0       	brcs	.+6      	; 0x1ea7e <main+0x8c>
   1ea78:	a1 e0       	ldi	r26, 0x01	; 1
   1ea7a:	ca 2e       	mov	r12, r26
   1ea7c:	d1 2c       	mov	r13, r1
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % 7000) == 0)
   1ea7e:	c8 01       	movw	r24, r16
   1ea80:	b7 01       	movw	r22, r14
   1ea82:	28 e5       	ldi	r18, 0x58	; 88
   1ea84:	3b e1       	ldi	r19, 0x1B	; 27
   1ea86:	40 e0       	ldi	r20, 0x00	; 0
   1ea88:	50 e0       	ldi	r21, 0x00	; 0
   1ea8a:	0e 94 9d ff 	call	0x1ff3a	; 0x1ff3a <__udivmodsi4>
   1ea8e:	61 15       	cp	r22, r1
   1ea90:	71 05       	cpc	r23, r1
   1ea92:	81 05       	cpc	r24, r1
   1ea94:	91 05       	cpc	r25, r1
   1ea96:	19 f4       	brne	.+6      	; 0x1ea9e <main+0xac>
			{
				//*	toggle the LED
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   1ea98:	85 b1       	in	r24, 0x05	; 5
   1ea9a:	80 58       	subi	r24, 0x80	; 128
   1ea9c:	85 b9       	out	0x05, r24	; 5


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1ea9e:	80 91 c0 00 	lds	r24, 0x00C0
	delay_ms(100);
#endif

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   1eaa2:	87 fd       	sbrc	r24, 7
   1eaa4:	03 c0       	rjmp	.+6      	; 0x1eaac <main+0xba>
   1eaa6:	c1 14       	cp	r12, r1
   1eaa8:	d1 04       	cpc	r13, r1
   1eaaa:	a9 f2       	breq	.-86     	; 0x1ea56 <main+0x64>
	sendchar(0x0a);

	delay_ms(100);
#endif

	while (boot_state==0)
   1eaac:	a6 01       	movw	r20, r12
   1eaae:	4f 5f       	subi	r20, 0xFF	; 255
   1eab0:	5f 4f       	sbci	r21, 0xFF	; 255
   1eab2:	c2 5e       	subi	r28, 0xE2	; 226
   1eab4:	de 4f       	sbci	r29, 0xFE	; 254
   1eab6:	59 83       	std	Y+1, r21	; 0x01
   1eab8:	48 83       	st	Y, r20
   1eaba:	ce 51       	subi	r28, 0x1E	; 30
   1eabc:	d1 40       	sbci	r29, 0x01	; 1
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   1eabe:	c2 5e       	subi	r28, 0xE2	; 226
   1eac0:	de 4f       	sbci	r29, 0xFE	; 254
   1eac2:	68 81       	ld	r22, Y
   1eac4:	79 81       	ldd	r23, Y+1	; 0x01
   1eac6:	ce 51       	subi	r28, 0x1E	; 30
   1eac8:	d1 40       	sbci	r29, 0x01	; 1
   1eaca:	61 30       	cpi	r22, 0x01	; 1
   1eacc:	71 05       	cpc	r23, r1
   1eace:	11 f0       	breq	.+4      	; 0x1ead4 <main+0xe2>
   1ead0:	0c 94 6c ff 	jmp	0x1fed8	; 0x1fed8 <main+0x14e6>
   1ead4:	c0 5d       	subi	r28, 0xD0	; 208
   1ead6:	de 4f       	sbci	r29, 0xFE	; 254
   1ead8:	19 82       	std	Y+1, r1	; 0x01
   1eada:	18 82       	st	Y, r1
   1eadc:	c0 53       	subi	r28, 0x30	; 48
   1eade:	d1 40       	sbci	r29, 0x01	; 1
   1eae0:	60 e0       	ldi	r22, 0x00	; 0
   1eae2:	c1 5d       	subi	r28, 0xD1	; 209
   1eae4:	de 4f       	sbci	r29, 0xFE	; 254
   1eae6:	18 82       	st	Y, r1
   1eae8:	cf 52       	subi	r28, 0x2F	; 47
   1eaea:	d1 40       	sbci	r29, 0x01	; 1
   1eaec:	aa 24       	eor	r10, r10
   1eaee:	bb 24       	eor	r11, r11
   1eaf0:	c0 5e       	subi	r28, 0xE0	; 224
   1eaf2:	de 4f       	sbci	r29, 0xFE	; 254
   1eaf4:	18 82       	st	Y, r1
   1eaf6:	19 82       	std	Y+1, r1	; 0x01
   1eaf8:	1a 82       	std	Y+2, r1	; 0x02
   1eafa:	1b 82       	std	Y+3, r1	; 0x03
   1eafc:	c0 52       	subi	r28, 0x20	; 32
   1eafe:	d1 40       	sbci	r29, 0x01	; 1
   1eb00:	ce 5c       	subi	r28, 0xCE	; 206
   1eb02:	de 4f       	sbci	r29, 0xFE	; 254
   1eb04:	18 82       	st	Y, r1
   1eb06:	19 82       	std	Y+1, r1	; 0x01
   1eb08:	1a 82       	std	Y+2, r1	; 0x02
   1eb0a:	1b 82       	std	Y+3, r1	; 0x03
   1eb0c:	c2 53       	subi	r28, 0x32	; 50
   1eb0e:	d1 40       	sbci	r29, 0x01	; 1
		count++;
		if (count > MAX_TIME_COUNT)
		{
		unsigned int	data;
		#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   1eb10:	80 e0       	ldi	r24, 0x00	; 0
   1eb12:	90 e0       	ldi	r25, 0x00	; 0
   1eb14:	a0 e0       	ldi	r26, 0x00	; 0
   1eb16:	b0 e0       	ldi	r27, 0x00	; 0
   1eb18:	ab bf       	out	0x3b, r26	; 59
   1eb1a:	fc 01       	movw	r30, r24
   1eb1c:	a7 91       	elpm	r26, Z+
   1eb1e:	b6 91       	elpm	r27, Z+
   1eb20:	c4 5c       	subi	r28, 0xC4	; 196
   1eb22:	de 4f       	sbci	r29, 0xFE	; 254
   1eb24:	b9 83       	std	Y+1, r27	; 0x01
   1eb26:	a8 83       	st	Y, r26
   1eb28:	cc 53       	subi	r28, 0x3C	; 60
   1eb2a:	d1 40       	sbci	r29, 0x01	; 1
   1eb2c:	0c 94 67 ff 	jmp	0x1fece	; 0x1fece <main+0x14dc>
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   1eb30:	c2 5e       	subi	r28, 0xE2	; 226
   1eb32:	de 4f       	sbci	r29, 0xFE	; 254
   1eb34:	e8 81       	ld	r30, Y
   1eb36:	f9 81       	ldd	r31, Y+1	; 0x01
   1eb38:	ce 51       	subi	r28, 0x1E	; 30
   1eb3a:	d1 40       	sbci	r29, 0x01	; 1
   1eb3c:	31 97       	sbiw	r30, 0x01	; 1
   1eb3e:	09 f5       	brne	.+66     	; 0x1eb82 <main+0x190>
				{
					boot_state	=	0;
					c			=	UART_DATA_REG;
   1eb40:	20 91 c6 00 	lds	r18, 0x00C6
   1eb44:	c2 5e       	subi	r28, 0xE2	; 226
   1eb46:	de 4f       	sbci	r29, 0xFE	; 254
   1eb48:	19 82       	std	Y+1, r1	; 0x01
   1eb4a:	18 82       	st	Y, r1
   1eb4c:	ce 51       	subi	r28, 0x1E	; 30
   1eb4e:	d1 40       	sbci	r29, 0x01	; 1
   1eb50:	22 c0       	rjmp	.+68     	; 0x1eb96 <main+0x1a4>
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
	{
		// wait for data
		count++;
   1eb52:	2f 5f       	subi	r18, 0xFF	; 255
   1eb54:	3f 4f       	sbci	r19, 0xFF	; 255
   1eb56:	4f 4f       	sbci	r20, 0xFF	; 255
   1eb58:	5f 4f       	sbci	r21, 0xFF	; 255
		if (count > MAX_TIME_COUNT)
   1eb5a:	21 30       	cpi	r18, 0x01	; 1
   1eb5c:	f2 e1       	ldi	r31, 0x12	; 18
   1eb5e:	3f 07       	cpc	r19, r31
   1eb60:	fa e7       	ldi	r31, 0x7A	; 122
   1eb62:	4f 07       	cpc	r20, r31
   1eb64:	f0 e0       	ldi	r31, 0x00	; 0
   1eb66:	5f 07       	cpc	r21, r31
   1eb68:	80 f0       	brcs	.+32     	; 0x1eb8a <main+0x198>
		#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   1eb6a:	c4 5c       	subi	r28, 0xC4	; 196
   1eb6c:	de 4f       	sbci	r29, 0xFE	; 254
   1eb6e:	08 81       	ld	r16, Y
   1eb70:	19 81       	ldd	r17, Y+1	; 0x01
   1eb72:	cc 53       	subi	r28, 0x3C	; 60
   1eb74:	d1 40       	sbci	r29, 0x01	; 1
   1eb76:	0f 5f       	subi	r16, 0xFF	; 255
   1eb78:	1f 4f       	sbci	r17, 0xFF	; 255
   1eb7a:	19 f0       	breq	.+6      	; 0x1eb82 <main+0x190>
			{
				asm volatile(
   1eb7c:	ee 27       	eor	r30, r30
   1eb7e:	ff 27       	eor	r31, r31
   1eb80:	09 94       	ijmp
   1eb82:	20 e0       	ldi	r18, 0x00	; 0
   1eb84:	30 e0       	ldi	r19, 0x00	; 0
   1eb86:	40 e0       	ldi	r20, 0x00	; 0
   1eb88:	50 e0       	ldi	r21, 0x00	; 0
//*****************************************************************************
static unsigned char recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   1eb8a:	80 91 c0 00 	lds	r24, 0x00C0
   1eb8e:	87 ff       	sbrs	r24, 7
   1eb90:	e0 cf       	rjmp	.-64     	; 0x1eb52 <main+0x160>
						);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   1eb92:	20 91 c6 00 	lds	r18, 0x00C6
				//	c	=	recchar();
					c	=	recchar_timeout();
				}

			#ifdef ENABLE_MONITOR
				if (c == '!')
   1eb96:	21 32       	cpi	r18, 0x21	; 33
   1eb98:	09 f0       	breq	.+2      	; 0x1eb9c <main+0x1aa>
   1eb9a:	94 c6       	rjmp	.+3368   	; 0x1f8c4 <main+0xed2>
				{
					exPointCntr++;
   1eb9c:	08 94       	sec
   1eb9e:	a1 1c       	adc	r10, r1
   1eba0:	b1 1c       	adc	r11, r1
					if (exPointCntr == 3)
   1eba2:	33 e0       	ldi	r19, 0x03	; 3
   1eba4:	a3 16       	cp	r10, r19
   1eba6:	b1 04       	cpc	r11, r1
   1eba8:	09 f0       	breq	.+2      	; 0x1ebac <main+0x1ba>
   1ebaa:	8e c6       	rjmp	.+3356   	; 0x1f8c8 <main+0xed6>
   1ebac:	00 e0       	ldi	r16, 0x00	; 0
   1ebae:	10 e0       	ldi	r17, 0x00	; 0
   1ebb0:	18 c0       	rjmp	.+48     	; 0x1ebe2 <main+0x1f0>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ebb2:	41 e2       	ldi	r20, 0x21	; 33
   1ebb4:	40 93 c6 00 	sts	0x00C6, r20
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1ebb8:	80 91 c0 00 	lds	r24, 0x00C0
   1ebbc:	86 ff       	sbrs	r24, 6
   1ebbe:	fc cf       	rjmp	.-8      	; 0x1ebb8 <main+0x1c6>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1ebc0:	80 91 c0 00 	lds	r24, 0x00C0
   1ebc4:	80 64       	ori	r24, 0x40	; 64
   1ebc6:	80 93 c0 00 	sts	0x00C0, r24
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
	{
		for (jj=0; jj<25; jj++)
   1ebca:	2f 5f       	subi	r18, 0xFF	; 255
   1ebcc:	3f 4f       	sbci	r19, 0xFF	; 255
   1ebce:	29 31       	cpi	r18, 0x19	; 25
   1ebd0:	31 05       	cpc	r19, r1
   1ebd2:	79 f7       	brne	.-34     	; 0x1ebb2 <main+0x1c0>
		{
			sendchar('!');
		}
		PrintNewLine();
   1ebd4:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
{
char			keepGoing;
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
   1ebd8:	0f 5f       	subi	r16, 0xFF	; 255
   1ebda:	1f 4f       	sbci	r17, 0xFF	; 255
   1ebdc:	05 30       	cpi	r16, 0x05	; 5
   1ebde:	11 05       	cpc	r17, r1
   1ebe0:	19 f0       	breq	.+6      	; 0x1ebe8 <main+0x1f6>
   1ebe2:	20 e0       	ldi	r18, 0x00	; 0
   1ebe4:	30 e0       	ldi	r19, 0x00	; 0
   1ebe6:	e5 cf       	rjmp	.-54     	; 0x1ebb2 <main+0x1c0>
			sendchar('!');
		}
		PrintNewLine();
	}

	gRamIndex			=	0;
   1ebe8:	10 92 08 02 	sts	0x0208, r1
   1ebec:	10 92 09 02 	sts	0x0209, r1
   1ebf0:	10 92 0a 02 	sts	0x020A, r1
   1ebf4:	10 92 0b 02 	sts	0x020B, r1
	gFlashIndex			=	0;
   1ebf8:	10 92 04 02 	sts	0x0204, r1
   1ebfc:	10 92 05 02 	sts	0x0205, r1
   1ec00:	10 92 06 02 	sts	0x0206, r1
   1ec04:	10 92 07 02 	sts	0x0207, r1
	gEepromIndex		=	0;
   1ec08:	10 92 00 02 	sts	0x0200, r1
   1ec0c:	10 92 01 02 	sts	0x0201, r1
   1ec10:	10 92 02 02 	sts	0x0202, r1
   1ec14:	10 92 03 02 	sts	0x0203, r1

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   1ec18:	8f ee       	ldi	r24, 0xEF	; 239
   1ec1a:	90 ee       	ldi	r25, 0xE0	; 224
   1ec1c:	60 e0       	ldi	r22, 0x00	; 0
   1ec1e:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>

	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
   1ec22:	80 e1       	ldi	r24, 0x10	; 16
   1ec24:	91 ee       	ldi	r25, 0xE1	; 225
   1ec26:	60 e0       	ldi	r22, 0x00	; 0
   1ec28:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   1ec2c:	80 91 c0 00 	lds	r24, 0x00C0
   1ec30:	87 ff       	sbrs	r24, 7
   1ec32:	fc cf       	rjmp	.-8      	; 0x1ec2c <main+0x23a>
	{
		// wait for data
	}
	return UART_DATA_REG;
   1ec34:	90 91 c6 00 	lds	r25, 0x00C6
	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
		theChar	=	recchar();
		if (theChar >= 0x60)
   1ec38:	90 36       	cpi	r25, 0x60	; 96
   1ec3a:	08 f0       	brcs	.+2      	; 0x1ec3e <main+0x24c>
		{
			theChar	=	theChar & 0x5F;
   1ec3c:	9f 75       	andi	r25, 0x5F	; 95
		{
			
		}
		else
	#endif
		if (theChar >= 0x20)
   1ec3e:	90 32       	cpi	r25, 0x20	; 32
   1ec40:	b8 f0       	brcs	.+46     	; 0x1ec70 <main+0x27e>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ec42:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1ec46:	80 91 c0 00 	lds	r24, 0x00C0
   1ec4a:	86 ff       	sbrs	r24, 6
   1ec4c:	fc cf       	rjmp	.-8      	; 0x1ec46 <main+0x254>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1ec4e:	80 91 c0 00 	lds	r24, 0x00C0
   1ec52:	80 64       	ori	r24, 0x40	; 64
   1ec54:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ec58:	80 e2       	ldi	r24, 0x20	; 32
   1ec5a:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1ec5e:	80 91 c0 00 	lds	r24, 0x00C0
   1ec62:	86 ff       	sbrs	r24, 6
   1ec64:	fc cf       	rjmp	.-8      	; 0x1ec5e <main+0x26c>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1ec66:	80 91 c0 00 	lds	r24, 0x00C0
   1ec6a:	80 64       	ori	r24, 0x40	; 64
   1ec6c:	80 93 c0 00 	sts	0x00C0, r24
		{
			sendchar(theChar);
			sendchar(0x20);
		}

		switch(theChar)
   1ec70:	98 34       	cpi	r25, 0x48	; 72
   1ec72:	09 f4       	brne	.+2      	; 0x1ec76 <main+0x284>
   1ec74:	db c1       	rjmp	.+950    	; 0x1f02c <main+0x63a>
   1ec76:	99 34       	cpi	r25, 0x49	; 73
   1ec78:	b8 f4       	brcc	.+46     	; 0x1eca8 <main+0x2b6>
   1ec7a:	92 34       	cpi	r25, 0x42	; 66
   1ec7c:	09 f4       	brne	.+2      	; 0x1ec80 <main+0x28e>
   1ec7e:	5d c1       	rjmp	.+698    	; 0x1ef3a <main+0x548>
   1ec80:	93 34       	cpi	r25, 0x43	; 67
   1ec82:	58 f4       	brcc	.+22     	; 0x1ec9a <main+0x2a8>
   1ec84:	90 33       	cpi	r25, 0x30	; 48
   1ec86:	19 f1       	breq	.+70     	; 0x1ecce <main+0x2dc>
   1ec88:	90 33       	cpi	r25, 0x30	; 48
   1ec8a:	08 f4       	brcc	.+2      	; 0x1ec8e <main+0x29c>
   1ec8c:	18 c6       	rjmp	.+3120   	; 0x1f8be <main+0xecc>
   1ec8e:	9f 33       	cpi	r25, 0x3F	; 63
   1ec90:	a1 f1       	breq	.+104    	; 0x1ecfa <main+0x308>
   1ec92:	90 34       	cpi	r25, 0x40	; 64
   1ec94:	09 f0       	breq	.+2      	; 0x1ec98 <main+0x2a6>
   1ec96:	13 c6       	rjmp	.+3110   	; 0x1f8be <main+0xecc>
   1ec98:	bd c0       	rjmp	.+378    	; 0x1ee14 <main+0x422>
   1ec9a:	95 34       	cpi	r25, 0x45	; 69
   1ec9c:	09 f4       	brne	.+2      	; 0x1eca0 <main+0x2ae>
   1ec9e:	74 c1       	rjmp	.+744    	; 0x1ef88 <main+0x596>
   1eca0:	96 34       	cpi	r25, 0x46	; 70
   1eca2:	09 f0       	breq	.+2      	; 0x1eca6 <main+0x2b4>
   1eca4:	0c c6       	rjmp	.+3096   	; 0x1f8be <main+0xecc>
   1eca6:	9c c1       	rjmp	.+824    	; 0x1efe0 <main+0x5ee>
   1eca8:	92 35       	cpi	r25, 0x52	; 82
   1ecaa:	09 f4       	brne	.+2      	; 0x1ecae <main+0x2bc>
   1ecac:	2f c2       	rjmp	.+1118   	; 0x1f10c <main+0x71a>
   1ecae:	93 35       	cpi	r25, 0x53	; 83
   1ecb0:	38 f4       	brcc	.+14     	; 0x1ecc0 <main+0x2ce>
   1ecb2:	9c 34       	cpi	r25, 0x4C	; 76
   1ecb4:	09 f4       	brne	.+2      	; 0x1ecb8 <main+0x2c6>
   1ecb6:	f9 c1       	rjmp	.+1010   	; 0x1f0aa <main+0x6b8>
   1ecb8:	91 35       	cpi	r25, 0x51	; 81
   1ecba:	09 f0       	breq	.+2      	; 0x1ecbe <main+0x2cc>
   1ecbc:	00 c6       	rjmp	.+3072   	; 0x1f8be <main+0xecc>
   1ecbe:	1c c2       	rjmp	.+1080   	; 0x1f0f8 <main+0x706>
   1ecc0:	96 35       	cpi	r25, 0x56	; 86
   1ecc2:	09 f4       	brne	.+2      	; 0x1ecc6 <main+0x2d4>
   1ecc4:	49 c2       	rjmp	.+1170   	; 0x1f158 <main+0x766>
   1ecc6:	99 35       	cpi	r25, 0x59	; 89
   1ecc8:	09 f0       	breq	.+2      	; 0x1eccc <main+0x2da>
   1ecca:	f9 c5       	rjmp	.+3058   	; 0x1f8be <main+0xecc>
   1eccc:	9c c4       	rjmp	.+2360   	; 0x1f606 <main+0xc14>
		{
			case '0':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 2);
   1ecce:	85 e8       	ldi	r24, 0x85	; 133
   1ecd0:	92 ee       	ldi	r25, 0xE2	; 226
   1ecd2:	62 e0       	ldi	r22, 0x02	; 2
   1ecd4:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
				gFlashIndex		=	0;
   1ecd8:	10 92 04 02 	sts	0x0204, r1
   1ecdc:	10 92 05 02 	sts	0x0205, r1
   1ece0:	10 92 06 02 	sts	0x0206, r1
   1ece4:	10 92 07 02 	sts	0x0207, r1
				gRamIndex		=	0;
   1ece8:	10 92 08 02 	sts	0x0208, r1
   1ecec:	10 92 09 02 	sts	0x0209, r1
   1ecf0:	10 92 0a 02 	sts	0x020A, r1
   1ecf4:	10 92 0b 02 	sts	0x020B, r1
   1ecf8:	17 c1       	rjmp	.+558    	; 0x1ef28 <main+0x536>
				gEepromIndex	=	0;
				break;

			case '?':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
   1ecfa:	89 e9       	ldi	r24, 0x99	; 153
   1ecfc:	92 ee       	ldi	r25, 0xE2	; 226
   1ecfe:	62 e0       	ldi	r22, 0x02	; 2
   1ed00:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
//************************************************************************
static void	PrintCPUstats(void)
{
unsigned char fuseByte;

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   1ed04:	8f ee       	ldi	r24, 0xEF	; 239
   1ed06:	90 ee       	ldi	r25, 0xE0	; 224
   1ed08:	60 e0       	ldi	r22, 0x00	; 0
   1ed0a:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_COMPILED_ON, 0);
   1ed0e:	81 e2       	ldi	r24, 0x21	; 33
   1ed10:	91 ee       	ldi	r25, 0xE1	; 225
   1ed12:	60 e0       	ldi	r22, 0x00	; 0
   1ed14:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_DATE_STR, 0);
   1ed18:	81 ec       	ldi	r24, 0xC1	; 193
   1ed1a:	91 ee       	ldi	r25, 0xE1	; 225
   1ed1c:	60 e0       	ldi	r22, 0x00	; 0
   1ed1e:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_CPU_Type, 0);
   1ed22:	81 e3       	ldi	r24, 0x31	; 49
   1ed24:	91 ee       	ldi	r25, 0xE1	; 225
   1ed26:	60 e0       	ldi	r22, 0x00	; 0
   1ed28:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   1ed2c:	84 ee       	ldi	r24, 0xE4	; 228
   1ed2e:	90 ee       	ldi	r25, 0xE0	; 224
   1ed30:	60 e0       	ldi	r22, 0x00	; 0
   1ed32:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_AVR_ARCH, 0);
   1ed36:	81 e4       	ldi	r24, 0x41	; 65
   1ed38:	91 ee       	ldi	r25, 0xE1	; 225
   1ed3a:	60 e0       	ldi	r22, 0x00	; 0
   1ed3c:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	PrintDecInt(__AVR_ARCH__, 1);
   1ed40:	83 e3       	ldi	r24, 0x33	; 51
   1ed42:	90 e0       	ldi	r25, 0x00	; 0
   1ed44:	61 e0       	ldi	r22, 0x01	; 1
   1ed46:	70 e0       	ldi	r23, 0x00	; 0
   1ed48:	0e 94 a3 f3 	call	0x1e746	; 0x1e746 <PrintDecInt>
	PrintNewLine();
   1ed4c:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_GCC_VERSION, 0);
   1ed50:	81 e6       	ldi	r24, 0x61	; 97
   1ed52:	91 ee       	ldi	r25, 0xE1	; 225
   1ed54:	60 e0       	ldi	r22, 0x00	; 0
   1ed56:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_VERSION_STR, 0);
   1ed5a:	83 ed       	ldi	r24, 0xD3	; 211
   1ed5c:	91 ee       	ldi	r25, 0xE1	; 225
   1ed5e:	60 e0       	ldi	r22, 0x00	; 0
   1ed60:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>

	//*	these can be found in avr/version.h
	PrintFromPROGMEM(gTextMsg_AVR_LIBC, 0);
   1ed64:	81 e5       	ldi	r24, 0x51	; 81
   1ed66:	91 ee       	ldi	r25, 0xE1	; 225
   1ed68:	60 e0       	ldi	r22, 0x00	; 0
   1ed6a:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_AVR_LIBC_VER_STR, 0);
   1ed6e:	8d ec       	ldi	r24, 0xCD	; 205
   1ed70:	91 ee       	ldi	r25, 0xE1	; 225
   1ed72:	60 e0       	ldi	r22, 0x00	; 0
   1ed74:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>

#if defined(SIGNATURE_0)
	PrintFromPROGMEM(gTextMsg_CPU_SIGNATURE, 0);
   1ed78:	81 e7       	ldi	r24, 0x71	; 113
   1ed7a:	91 ee       	ldi	r25, 0xE1	; 225
   1ed7c:	60 e0       	ldi	r22, 0x00	; 0
   1ed7e:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	//*	these can be found in avr/iomxxx.h
	PrintHexByte(SIGNATURE_0);
   1ed82:	8e e1       	ldi	r24, 0x1E	; 30
   1ed84:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
	PrintHexByte(SIGNATURE_1);
   1ed88:	87 e9       	ldi	r24, 0x97	; 151
   1ed8a:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
	PrintHexByte(SIGNATURE_2);
   1ed8e:	83 e0       	ldi	r24, 0x03	; 3
   1ed90:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
	PrintNewLine();
   1ed94:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
#endif


#if defined(GET_LOW_FUSE_BITS)
	//*	fuse settings
	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOW, 0);
   1ed98:	81 e8       	ldi	r24, 0x81	; 129
   1ed9a:	91 ee       	ldi	r25, 0xE1	; 225
   1ed9c:	60 e0       	ldi	r22, 0x00	; 0
   1ed9e:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   1eda2:	19 e0       	ldi	r17, 0x09	; 9
   1eda4:	e0 e0       	ldi	r30, 0x00	; 0
   1eda6:	f0 e0       	ldi	r31, 0x00	; 0
   1eda8:	10 93 57 00 	sts	0x0057, r17
   1edac:	e4 91       	lpm	r30, Z+
	PrintHexByte(fuseByte);
   1edae:	8e 2f       	mov	r24, r30
   1edb0:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
	PrintNewLine();
   1edb4:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_HIGH, 0);
   1edb8:	81 e9       	ldi	r24, 0x91	; 145
   1edba:	91 ee       	ldi	r25, 0xE1	; 225
   1edbc:	60 e0       	ldi	r22, 0x00	; 0
   1edbe:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   1edc2:	e3 e0       	ldi	r30, 0x03	; 3
   1edc4:	f0 e0       	ldi	r31, 0x00	; 0
   1edc6:	10 93 57 00 	sts	0x0057, r17
   1edca:	e4 91       	lpm	r30, Z+
	PrintHexByte(fuseByte);
   1edcc:	8e 2f       	mov	r24, r30
   1edce:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
	PrintNewLine();
   1edd2:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_EXT, 0);
   1edd6:	81 ea       	ldi	r24, 0xA1	; 161
   1edd8:	91 ee       	ldi	r25, 0xE1	; 225
   1edda:	60 e0       	ldi	r22, 0x00	; 0
   1eddc:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   1ede0:	e2 e0       	ldi	r30, 0x02	; 2
   1ede2:	f0 e0       	ldi	r31, 0x00	; 0
   1ede4:	10 93 57 00 	sts	0x0057, r17
   1ede8:	e4 91       	lpm	r30, Z+
	PrintHexByte(fuseByte);
   1edea:	8e 2f       	mov	r24, r30
   1edec:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
	PrintNewLine();
   1edf0:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOCK, 0);
   1edf4:	81 eb       	ldi	r24, 0xB1	; 177
   1edf6:	91 ee       	ldi	r25, 0xE1	; 225
   1edf8:	60 e0       	ldi	r22, 0x00	; 0
   1edfa:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1edfe:	e1 e0       	ldi	r30, 0x01	; 1
   1ee00:	f0 e0       	ldi	r31, 0x00	; 0
   1ee02:	10 93 57 00 	sts	0x0057, r17
   1ee06:	14 91       	lpm	r17, Z+
	PrintHexByte(fuseByte);
   1ee08:	81 2f       	mov	r24, r17
   1ee0a:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
	PrintNewLine();
   1ee0e:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
   1ee12:	07 cf       	rjmp	.-498    	; 0x1ec22 <main+0x230>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
				PrintCPUstats();
				break;

			case '@':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
   1ee14:	85 ea       	ldi	r24, 0xA5	; 165
   1ee16:	92 ee       	ldi	r25, 0xE2	; 226
   1ee18:	62 e0       	ldi	r22, 0x02	; 2
   1ee1a:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
int		ii;
char	theChar;
char	theEEPROMchar;
int		errorCount;

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
   1ee1e:	85 e5       	ldi	r24, 0x55	; 85
   1ee20:	92 ee       	ldi	r25, 0xE2	; 226
   1ee22:	60 e0       	ldi	r22, 0x00	; 0
   1ee24:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintNewLine();
   1ee28:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
   1ee2c:	00 e0       	ldi	r16, 0x00	; 0
   1ee2e:	10 e0       	ldi	r17, 0x00	; 0
   1ee30:	19 c0       	rjmp	.+50     	; 0x1ee64 <main+0x472>
	ii			=	0;
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
	{
		eeprom_write_byte((uint8_t *)ii, theChar);
   1ee32:	c8 01       	movw	r24, r16
   1ee34:	6f 2d       	mov	r22, r15
   1ee36:	0e 94 db ff 	call	0x1ffb6	; 0x1ffb6 <__eewr_byte_m1280>
		if (theChar == 0)
   1ee3a:	ff 20       	and	r15, r15
   1ee3c:	31 f4       	brne	.+12     	; 0x1ee4a <main+0x458>
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   1ee3e:	83 e5       	ldi	r24, 0x53	; 83
   1ee40:	92 ee       	ldi	r25, 0xE2	; 226
   1ee42:	60 e0       	ldi	r22, 0x00	; 0
   1ee44:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
   1ee48:	0b c0       	rjmp	.+22     	; 0x1ee60 <main+0x46e>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ee4a:	f0 92 c6 00 	sts	0x00C6, r15
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1ee4e:	80 91 c0 00 	lds	r24, 0x00C0
   1ee52:	86 ff       	sbrs	r24, 6
   1ee54:	fc cf       	rjmp	.-8      	; 0x1ee4e <main+0x45c>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1ee56:	80 91 c0 00 	lds	r24, 0x00C0
   1ee5a:	80 64       	ori	r24, 0x40	; 64
   1ee5c:	80 93 c0 00 	sts	0x00C0, r24
		}
		else
		{
			sendchar(theChar);
		}
		ii++;
   1ee60:	0f 5f       	subi	r16, 0xFF	; 255
   1ee62:	1f 4f       	sbci	r17, 0xFF	; 255
int		errorCount;

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
	PrintNewLine();
	ii			=	0;
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   1ee64:	c8 01       	movw	r24, r16
   1ee66:	81 51       	subi	r24, 0x11	; 17
   1ee68:	9f 41       	sbci	r25, 0x1F	; 31
   1ee6a:	aa 27       	eor	r26, r26
   1ee6c:	97 fd       	sbrc	r25, 7
   1ee6e:	a0 95       	com	r26
   1ee70:	ba 2f       	mov	r27, r26
   1ee72:	ab bf       	out	0x3b, r26	; 59
   1ee74:	fc 01       	movw	r30, r24
   1ee76:	f7 90       	elpm	r15, Z+
   1ee78:	5a e2       	ldi	r21, 0x2A	; 42
   1ee7a:	f5 16       	cp	r15, r21
   1ee7c:	21 f0       	breq	.+8      	; 0x1ee86 <main+0x494>
   1ee7e:	62 e0       	ldi	r22, 0x02	; 2
   1ee80:	00 30       	cpi	r16, 0x00	; 0
   1ee82:	16 07       	cpc	r17, r22
   1ee84:	b1 f6       	brne	.-84     	; 0x1ee32 <main+0x440>
		}
		ii++;
	}

	//*	no go back through and test
	PrintNewLine();
   1ee86:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
	PrintNewLine();
   1ee8a:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
   1ee8e:	81 e6       	ldi	r24, 0x61	; 97
   1ee90:	92 ee       	ldi	r25, 0xE2	; 226
   1ee92:	60 e0       	ldi	r22, 0x00	; 0
   1ee94:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintNewLine();
   1ee98:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
   1ee9c:	cc 24       	eor	r12, r12
   1ee9e:	dd 24       	eor	r13, r13
   1eea0:	00 e0       	ldi	r16, 0x00	; 0
   1eea2:	10 e0       	ldi	r17, 0x00	; 0
   1eea4:	1e c0       	rjmp	.+60     	; 0x1eee2 <main+0x4f0>
	errorCount	=	0;
	ii			=	0;
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
	{
		theEEPROMchar	=	eeprom_read_byte((uint8_t *)ii);
   1eea6:	c8 01       	movw	r24, r16
   1eea8:	0e 94 d3 ff 	call	0x1ffa6	; 0x1ffa6 <__eerd_byte_m1280>
   1eeac:	f8 2e       	mov	r15, r24
		if (theEEPROMchar == 0)
   1eeae:	88 23       	and	r24, r24
   1eeb0:	31 f4       	brne	.+12     	; 0x1eebe <main+0x4cc>
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   1eeb2:	83 e5       	ldi	r24, 0x53	; 83
   1eeb4:	92 ee       	ldi	r25, 0xE2	; 226
   1eeb6:	60 e0       	ldi	r22, 0x00	; 0
   1eeb8:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
   1eebc:	0b c0       	rjmp	.+22     	; 0x1eed4 <main+0x4e2>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1eebe:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1eec2:	80 91 c0 00 	lds	r24, 0x00C0
   1eec6:	86 ff       	sbrs	r24, 6
   1eec8:	fc cf       	rjmp	.-8      	; 0x1eec2 <main+0x4d0>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1eeca:	80 91 c0 00 	lds	r24, 0x00C0
   1eece:	80 64       	ori	r24, 0x40	; 64
   1eed0:	80 93 c0 00 	sts	0x00C0, r24
		}
		else
		{
			sendchar(theEEPROMchar);
		}
		if (theEEPROMchar != theChar)
   1eed4:	fe 14       	cp	r15, r14
   1eed6:	19 f0       	breq	.+6      	; 0x1eede <main+0x4ec>
		{
			errorCount++;
   1eed8:	08 94       	sec
   1eeda:	c1 1c       	adc	r12, r1
   1eedc:	d1 1c       	adc	r13, r1
		}
		ii++;
   1eede:	0f 5f       	subi	r16, 0xFF	; 255
   1eee0:	1f 4f       	sbci	r17, 0xFF	; 255
	PrintNewLine();
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
	PrintNewLine();
	errorCount	=	0;
	ii			=	0;
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   1eee2:	c8 01       	movw	r24, r16
   1eee4:	81 51       	subi	r24, 0x11	; 17
   1eee6:	9f 41       	sbci	r25, 0x1F	; 31
   1eee8:	aa 27       	eor	r26, r26
   1eeea:	97 fd       	sbrc	r25, 7
   1eeec:	a0 95       	com	r26
   1eeee:	ba 2f       	mov	r27, r26
   1eef0:	ab bf       	out	0x3b, r26	; 59
   1eef2:	fc 01       	movw	r30, r24
   1eef4:	e7 90       	elpm	r14, Z+
   1eef6:	7a e2       	ldi	r23, 0x2A	; 42
   1eef8:	e7 16       	cp	r14, r23
   1eefa:	21 f0       	breq	.+8      	; 0x1ef04 <main+0x512>
   1eefc:	82 e0       	ldi	r24, 0x02	; 2
   1eefe:	00 30       	cpi	r16, 0x00	; 0
   1ef00:	18 07       	cpc	r17, r24
   1ef02:	89 f6       	brne	.-94     	; 0x1eea6 <main+0x4b4>
		{
			errorCount++;
		}
		ii++;
	}
	PrintNewLine();
   1ef04:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
	PrintNewLine();
   1ef08:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
	PrintFromPROGMEM(gTextMsg_EEPROMerrorCnt, 0);
   1ef0c:	8c e6       	ldi	r24, 0x6C	; 108
   1ef0e:	92 ee       	ldi	r25, 0xE2	; 226
   1ef10:	60 e0       	ldi	r22, 0x00	; 0
   1ef12:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	PrintDecInt(errorCount, 1);
   1ef16:	c6 01       	movw	r24, r12
   1ef18:	61 e0       	ldi	r22, 0x01	; 1
   1ef1a:	70 e0       	ldi	r23, 0x00	; 0
   1ef1c:	0e 94 a3 f3 	call	0x1e746	; 0x1e746 <PrintDecInt>
	PrintNewLine();
   1ef20:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
	PrintNewLine();
   1ef24:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>

	gEepromIndex	=	0;	//*	set index back to zero for next eeprom dump
   1ef28:	10 92 00 02 	sts	0x0200, r1
   1ef2c:	10 92 01 02 	sts	0x0201, r1
   1ef30:	10 92 02 02 	sts	0x0202, r1
   1ef34:	10 92 03 02 	sts	0x0203, r1
   1ef38:	74 ce       	rjmp	.-792    	; 0x1ec22 <main+0x230>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
				EEPROMtest();
				break;

			case 'B':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
   1ef3a:	83 eb       	ldi	r24, 0xB3	; 179
   1ef3c:	92 ee       	ldi	r25, 0xE2	; 226
   1ef3e:	62 e0       	ldi	r22, 0x02	; 2
   1ef40:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
}

//************************************************************************
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   1ef44:	27 9a       	sbi	0x04, 7	; 4
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   1ef46:	2f 9a       	sbi	0x05, 7	; 5
   1ef48:	16 c0       	rjmp	.+44     	; 0x1ef76 <main+0x584>

	while (!Serial_Available())
	{
		PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
   1ef4a:	2f 98       	cbi	0x05, 7	; 5
   1ef4c:	80 e0       	ldi	r24, 0x00	; 0
   1ef4e:	90 e0       	ldi	r25, 0x00	; 0
   1ef50:	e0 ed       	ldi	r30, 0xD0	; 208
   1ef52:	f7 e0       	ldi	r31, 0x07	; 7
   1ef54:	31 97       	sbiw	r30, 0x01	; 1
   1ef56:	f1 f7       	brne	.-4      	; 0x1ef54 <main+0x562>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1ef58:	01 96       	adiw	r24, 0x01	; 1
   1ef5a:	84 36       	cpi	r24, 0x64	; 100
   1ef5c:	91 05       	cpc	r25, r1
   1ef5e:	c1 f7       	brne	.-16     	; 0x1ef50 <main+0x55e>

	while (!Serial_Available())
	{
		PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
		delay_ms(100);
		PROGLED_PORT	|=	(1<<PROGLED_PIN);	// turn LED on
   1ef60:	2f 9a       	sbi	0x05, 7	; 5
   1ef62:	80 e0       	ldi	r24, 0x00	; 0
   1ef64:	90 e0       	ldi	r25, 0x00	; 0
   1ef66:	e0 ed       	ldi	r30, 0xD0	; 208
   1ef68:	f7 e0       	ldi	r31, 0x07	; 7
   1ef6a:	31 97       	sbiw	r30, 0x01	; 1
   1ef6c:	f1 f7       	brne	.-4      	; 0x1ef6a <main+0x578>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1ef6e:	01 96       	adiw	r24, 0x01	; 1
   1ef70:	84 36       	cpi	r24, 0x64	; 100
   1ef72:	91 05       	cpc	r25, r1
   1ef74:	c1 f7       	brne	.-16     	; 0x1ef66 <main+0x574>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1ef76:	80 91 c0 00 	lds	r24, 0x00C0
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON

	while (!Serial_Available())
   1ef7a:	87 ff       	sbrs	r24, 7
   1ef7c:	e6 cf       	rjmp	.-52     	; 0x1ef4a <main+0x558>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   1ef7e:	80 91 c0 00 	lds	r24, 0x00C0
   1ef82:	87 ff       	sbrs	r24, 7
   1ef84:	fc cf       	rjmp	.-8      	; 0x1ef7e <main+0x58c>
   1ef86:	95 c4       	rjmp	.+2346   	; 0x1f8b2 <main+0xec0>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
				BlinkLED();
				break;

			case 'E':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 2);
   1ef88:	8f eb       	ldi	r24, 0xBF	; 191
   1ef8a:	92 ee       	ldi	r25, 0xE2	; 226
   1ef8c:	62 e0       	ldi	r22, 0x02	; 2
   1ef8e:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
				DumpHex(kDUMP_EEPROM, gEepromIndex, 16);
   1ef92:	40 91 00 02 	lds	r20, 0x0200
   1ef96:	50 91 01 02 	lds	r21, 0x0201
   1ef9a:	60 91 02 02 	lds	r22, 0x0202
   1ef9e:	70 91 03 02 	lds	r23, 0x0203
   1efa2:	81 e0       	ldi	r24, 0x01	; 1
   1efa4:	20 e1       	ldi	r18, 0x10	; 16
   1efa6:	0e 94 2a f4 	call	0x1e854	; 0x1e854 <DumpHex>
				gEepromIndex	+=	256;
   1efaa:	80 91 00 02 	lds	r24, 0x0200
   1efae:	90 91 01 02 	lds	r25, 0x0201
   1efb2:	a0 91 02 02 	lds	r26, 0x0202
   1efb6:	b0 91 03 02 	lds	r27, 0x0203
   1efba:	80 50       	subi	r24, 0x00	; 0
   1efbc:	9f 4f       	sbci	r25, 0xFF	; 255
   1efbe:	af 4f       	sbci	r26, 0xFF	; 255
   1efc0:	bf 4f       	sbci	r27, 0xFF	; 255
   1efc2:	80 93 00 02 	sts	0x0200, r24
   1efc6:	90 93 01 02 	sts	0x0201, r25
   1efca:	a0 93 02 02 	sts	0x0202, r26
   1efce:	b0 93 03 02 	sts	0x0203, r27
				if (gEepromIndex > E2END)
   1efd2:	80 50       	subi	r24, 0x00	; 0
   1efd4:	90 41       	sbci	r25, 0x10	; 16
   1efd6:	a0 40       	sbci	r26, 0x00	; 0
   1efd8:	b0 40       	sbci	r27, 0x00	; 0
   1efda:	08 f4       	brcc	.+2      	; 0x1efde <main+0x5ec>
   1efdc:	22 ce       	rjmp	.-956    	; 0x1ec22 <main+0x230>
   1efde:	a4 cf       	rjmp	.-184    	; 0x1ef28 <main+0x536>
					gEepromIndex	=	0;
				}
				break;
		
			case 'F':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 2);
   1efe0:	8d ec       	ldi	r24, 0xCD	; 205
   1efe2:	92 ee       	ldi	r25, 0xE2	; 226
   1efe4:	62 e0       	ldi	r22, 0x02	; 2
   1efe6:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
				DumpHex(kDUMP_FLASH, gFlashIndex, 16);
   1efea:	40 91 04 02 	lds	r20, 0x0204
   1efee:	50 91 05 02 	lds	r21, 0x0205
   1eff2:	60 91 06 02 	lds	r22, 0x0206
   1eff6:	70 91 07 02 	lds	r23, 0x0207
   1effa:	80 e0       	ldi	r24, 0x00	; 0
   1effc:	20 e1       	ldi	r18, 0x10	; 16
   1effe:	0e 94 2a f4 	call	0x1e854	; 0x1e854 <DumpHex>
				gFlashIndex	+=	256;
   1f002:	80 91 04 02 	lds	r24, 0x0204
   1f006:	90 91 05 02 	lds	r25, 0x0205
   1f00a:	a0 91 06 02 	lds	r26, 0x0206
   1f00e:	b0 91 07 02 	lds	r27, 0x0207
   1f012:	80 50       	subi	r24, 0x00	; 0
   1f014:	9f 4f       	sbci	r25, 0xFF	; 255
   1f016:	af 4f       	sbci	r26, 0xFF	; 255
   1f018:	bf 4f       	sbci	r27, 0xFF	; 255
   1f01a:	80 93 04 02 	sts	0x0204, r24
   1f01e:	90 93 05 02 	sts	0x0205, r25
   1f022:	a0 93 06 02 	sts	0x0206, r26
   1f026:	b0 93 07 02 	sts	0x0207, r27
   1f02a:	fb cd       	rjmp	.-1034   	; 0x1ec22 <main+0x230>
				break;

			case 'H':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
   1f02c:	8a ed       	ldi	r24, 0xDA	; 218
   1f02e:	92 ee       	ldi	r25, 0xE2	; 226
   1f030:	62 e0       	ldi	r22, 0x02	; 2
   1f032:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>


//*******************************************************************
static void PrintHelp(void)
{
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 0);
   1f036:	85 e8       	ldi	r24, 0x85	; 133
   1f038:	92 ee       	ldi	r25, 0xE2	; 226
   1f03a:	60 e0       	ldi	r22, 0x00	; 0
   1f03c:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 0);
   1f040:	89 e9       	ldi	r24, 0x99	; 153
   1f042:	92 ee       	ldi	r25, 0xE2	; 226
   1f044:	60 e0       	ldi	r22, 0x00	; 0
   1f046:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 0);
   1f04a:	85 ea       	ldi	r24, 0xA5	; 165
   1f04c:	92 ee       	ldi	r25, 0xE2	; 226
   1f04e:	60 e0       	ldi	r22, 0x00	; 0
   1f050:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 0);
   1f054:	83 eb       	ldi	r24, 0xB3	; 179
   1f056:	92 ee       	ldi	r25, 0xE2	; 226
   1f058:	60 e0       	ldi	r22, 0x00	; 0
   1f05a:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 0);
   1f05e:	8f eb       	ldi	r24, 0xBF	; 191
   1f060:	92 ee       	ldi	r25, 0xE2	; 226
   1f062:	60 e0       	ldi	r22, 0x00	; 0
   1f064:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 0);
   1f068:	8d ec       	ldi	r24, 0xCD	; 205
   1f06a:	92 ee       	ldi	r25, 0xE2	; 226
   1f06c:	60 e0       	ldi	r22, 0x00	; 0
   1f06e:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 0);
   1f072:	8a ed       	ldi	r24, 0xDA	; 218
   1f074:	92 ee       	ldi	r25, 0xE2	; 226
   1f076:	60 e0       	ldi	r22, 0x00	; 0
   1f078:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>

	PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 0);
   1f07c:	81 ee       	ldi	r24, 0xE1	; 225
   1f07e:	92 ee       	ldi	r25, 0xE2	; 226
   1f080:	60 e0       	ldi	r22, 0x00	; 0
   1f082:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 0);
   1f086:	82 ef       	ldi	r24, 0xF2	; 242
   1f088:	92 ee       	ldi	r25, 0xE2	; 226
   1f08a:	60 e0       	ldi	r22, 0x00	; 0
   1f08c:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 0);
   1f090:	8c e0       	ldi	r24, 0x0C	; 12
   1f092:	93 ee       	ldi	r25, 0xE3	; 227
   1f094:	60 e0       	ldi	r22, 0x00	; 0
   1f096:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 0);
   1f09a:	87 e1       	ldi	r24, 0x17	; 23
   1f09c:	93 ee       	ldi	r25, 0xE3	; 227
   1f09e:	60 e0       	ldi	r22, 0x00	; 0
   1f0a0:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 0);
   1f0a4:	80 e3       	ldi	r24, 0x30	; 48
   1f0a6:	93 ee       	ldi	r25, 0xE3	; 227
   1f0a8:	b9 cd       	rjmp	.-1166   	; 0x1ec1c <main+0x22a>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
				PrintHelp();
				break;

			case 'L':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
   1f0aa:	81 ee       	ldi	r24, 0xE1	; 225
   1f0ac:	92 ee       	ldi	r25, 0xE2	; 226
   1f0ae:	62 e0       	ldi	r22, 0x02	; 2
   1f0b0:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
//************************************************************************
static void	ListAvailablePorts(void)
{

#ifdef DDRA
	PrintAvailablePort('A');
   1f0b4:	81 e4       	ldi	r24, 0x41	; 65
   1f0b6:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRB
	PrintAvailablePort('B');
   1f0ba:	82 e4       	ldi	r24, 0x42	; 66
   1f0bc:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRC
	PrintAvailablePort('C');
   1f0c0:	83 e4       	ldi	r24, 0x43	; 67
   1f0c2:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRD
	PrintAvailablePort('D');
   1f0c6:	84 e4       	ldi	r24, 0x44	; 68
   1f0c8:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRE
	PrintAvailablePort('E');
   1f0cc:	85 e4       	ldi	r24, 0x45	; 69
   1f0ce:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRF
	PrintAvailablePort('F');
   1f0d2:	86 e4       	ldi	r24, 0x46	; 70
   1f0d4:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRG
	PrintAvailablePort('G');
   1f0d8:	87 e4       	ldi	r24, 0x47	; 71
   1f0da:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRH
	PrintAvailablePort('H');
   1f0de:	88 e4       	ldi	r24, 0x48	; 72
   1f0e0:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#ifdef DDRI
	PrintAvailablePort('I');
#endif

#ifdef DDRJ
	PrintAvailablePort('J');
   1f0e4:	8a e4       	ldi	r24, 0x4A	; 74
   1f0e6:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRK
	PrintAvailablePort('K');
   1f0ea:	8b e4       	ldi	r24, 0x4B	; 75
   1f0ec:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
#endif

#ifdef DDRL
	PrintAvailablePort('L');
   1f0f0:	8c e4       	ldi	r24, 0x4C	; 76
   1f0f2:	0e 94 14 f4 	call	0x1e828	; 0x1e828 <PrintAvailablePort>
   1f0f6:	95 cd       	rjmp	.-1238   	; 0x1ec22 <main+0x230>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
				ListAvailablePorts();
				break;

			case 'Q':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 2);
   1f0f8:	82 ef       	ldi	r24, 0xF2	; 242
   1f0fa:	92 ee       	ldi	r25, 0xE2	; 226
   1f0fc:	62 e0       	ldi	r22, 0x02	; 2
   1f0fe:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
   1f102:	99 24       	eor	r9, r9
   1f104:	93 94       	inc	r9
   1f106:	aa 24       	eor	r10, r10
   1f108:	bb 24       	eor	r11, r11
   1f10a:	45 c4       	rjmp	.+2186   	; 0x1f996 <main+0xfa4>
				keepGoing	=	false;
				break;

			case 'R':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 2);
   1f10c:	8c e0       	ldi	r24, 0x0C	; 12
   1f10e:	93 ee       	ldi	r25, 0xE3	; 227
   1f110:	62 e0       	ldi	r22, 0x02	; 2
   1f112:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
				DumpHex(kDUMP_RAM, gRamIndex, 16);
   1f116:	40 91 08 02 	lds	r20, 0x0208
   1f11a:	50 91 09 02 	lds	r21, 0x0209
   1f11e:	60 91 0a 02 	lds	r22, 0x020A
   1f122:	70 91 0b 02 	lds	r23, 0x020B
   1f126:	82 e0       	ldi	r24, 0x02	; 2
   1f128:	20 e1       	ldi	r18, 0x10	; 16
   1f12a:	0e 94 2a f4 	call	0x1e854	; 0x1e854 <DumpHex>
				gRamIndex	+=	256;
   1f12e:	80 91 08 02 	lds	r24, 0x0208
   1f132:	90 91 09 02 	lds	r25, 0x0209
   1f136:	a0 91 0a 02 	lds	r26, 0x020A
   1f13a:	b0 91 0b 02 	lds	r27, 0x020B
   1f13e:	80 50       	subi	r24, 0x00	; 0
   1f140:	9f 4f       	sbci	r25, 0xFF	; 255
   1f142:	af 4f       	sbci	r26, 0xFF	; 255
   1f144:	bf 4f       	sbci	r27, 0xFF	; 255
   1f146:	80 93 08 02 	sts	0x0208, r24
   1f14a:	90 93 09 02 	sts	0x0209, r25
   1f14e:	a0 93 0a 02 	sts	0x020A, r26
   1f152:	b0 93 0b 02 	sts	0x020B, r27
   1f156:	65 cd       	rjmp	.-1334   	; 0x1ec22 <main+0x230>
				break;

			case 'V':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
   1f158:	87 e1       	ldi	r24, 0x17	; 23
   1f15a:	93 ee       	ldi	r25, 0xE3	; 227
   1f15c:	62 e0       	ldi	r22, 0x02	; 2
   1f15e:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   1f162:	84 ee       	ldi	r24, 0xE4	; 228
   1f164:	90 ee       	ldi	r25, 0xE0	; 224
   1f166:	60 e0       	ldi	r22, 0x00	; 0
   1f168:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
   1f16c:	89 ed       	ldi	r24, 0xD9	; 217
   1f16e:	91 ee       	ldi	r25, 0xE1	; 225
   1f170:	60 e0       	ldi	r22, 0x00	; 0
   1f172:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
   1f176:	09 e7       	ldi	r16, 0x79	; 121
   1f178:	15 ee       	ldi	r17, 0xE5	; 229
   1f17a:	cc 5d       	subi	r28, 0xDC	; 220
   1f17c:	de 4f       	sbci	r29, 0xFE	; 254
   1f17e:	19 83       	std	Y+1, r17	; 0x01
   1f180:	08 83       	st	Y, r16
   1f182:	c4 52       	subi	r28, 0x24	; 36
   1f184:	d1 40       	sbci	r29, 0x01	; 1
   1f186:	66 24       	eor	r6, r6
   1f188:	77 24       	eor	r7, r7
   1f18a:	43 01       	movw	r8, r6
   1f18c:	ca 5d       	subi	r28, 0xDA	; 218
   1f18e:	de 4f       	sbci	r29, 0xFE	; 254
   1f190:	19 82       	std	Y+1, r1	; 0x01
   1f192:	18 82       	st	Y, r1
   1f194:	c6 52       	subi	r28, 0x26	; 38
   1f196:	d1 40       	sbci	r29, 0x01	; 1
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
	{
		wordMemoryAddress	=	myMemoryPtr / 2;
   1f198:	a4 01       	movw	r20, r8
   1f19a:	93 01       	movw	r18, r6
   1f19c:	56 95       	lsr	r21
   1f19e:	47 95       	ror	r20
   1f1a0:	37 95       	ror	r19
   1f1a2:	27 95       	ror	r18
   1f1a4:	c8 5d       	subi	r28, 0xD8	; 216
   1f1a6:	de 4f       	sbci	r29, 0xFE	; 254
   1f1a8:	28 83       	st	Y, r18
   1f1aa:	39 83       	std	Y+1, r19	; 0x01
   1f1ac:	4a 83       	std	Y+2, r20	; 0x02
   1f1ae:	5b 83       	std	Y+3, r21	; 0x03
   1f1b0:	c8 52       	subi	r28, 0x28	; 40
   1f1b2:	d1 40       	sbci	r29, 0x01	; 1
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
   1f1b4:	ca 5d       	subi	r28, 0xDA	; 218
   1f1b6:	de 4f       	sbci	r29, 0xFE	; 254
   1f1b8:	48 81       	ld	r20, Y
   1f1ba:	59 81       	ldd	r21, Y+1	; 0x01
   1f1bc:	c6 52       	subi	r28, 0x26	; 38
   1f1be:	d1 40       	sbci	r29, 0x01	; 1
   1f1c0:	4f 5f       	subi	r20, 0xFF	; 255
   1f1c2:	5f 4f       	sbci	r21, 0xFF	; 255
   1f1c4:	ca 5d       	subi	r28, 0xDA	; 218
   1f1c6:	de 4f       	sbci	r29, 0xFE	; 254
   1f1c8:	59 83       	std	Y+1, r21	; 0x01
   1f1ca:	48 83       	st	Y, r20
   1f1cc:	c6 52       	subi	r28, 0x26	; 38
   1f1ce:	d1 40       	sbci	r29, 0x01	; 1
   1f1d0:	ca 01       	movw	r24, r20
   1f1d2:	62 e0       	ldi	r22, 0x02	; 2
   1f1d4:	70 e0       	ldi	r23, 0x00	; 0
   1f1d6:	0e 94 a3 f3 	call	0x1e746	; 0x1e746 <PrintDecInt>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f1da:	50 e2       	ldi	r21, 0x20	; 32
   1f1dc:	50 93 c6 00 	sts	0x00C6, r21
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f1e0:	80 91 c0 00 	lds	r24, 0x00C0
   1f1e4:	86 ff       	sbrs	r24, 6
   1f1e6:	fc cf       	rjmp	.-8      	; 0x1f1e0 <main+0x7ee>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f1e8:	80 91 c0 00 	lds	r24, 0x00C0
   1f1ec:	80 64       	ori	r24, 0x40	; 64
   1f1ee:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f1f2:	6d e2       	ldi	r22, 0x2D	; 45
   1f1f4:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f1f8:	80 91 c0 00 	lds	r24, 0x00C0
   1f1fc:	86 ff       	sbrs	r24, 6
   1f1fe:	fc cf       	rjmp	.-8      	; 0x1f1f8 <main+0x806>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f200:	80 91 c0 00 	lds	r24, 0x00C0
   1f204:	80 64       	ori	r24, 0x40	; 64
   1f206:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f20a:	70 e2       	ldi	r23, 0x20	; 32
   1f20c:	70 93 c6 00 	sts	0x00C6, r23
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f210:	80 91 c0 00 	lds	r24, 0x00C0
   1f214:	86 ff       	sbrs	r24, 6
   1f216:	fc cf       	rjmp	.-8      	; 0x1f210 <main+0x81e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f218:	80 91 c0 00 	lds	r24, 0x00C0
   1f21c:	80 64       	ori	r24, 0x40	; 64
   1f21e:	80 93 c0 00 	sts	0x00C0, r24
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);
		PrintHexByte((wordMemoryAddress >> 8) & 0x00ff);
   1f222:	c8 5d       	subi	r28, 0xD8	; 216
   1f224:	de 4f       	sbci	r29, 0xFE	; 254
   1f226:	e8 80       	ld	r14, Y
   1f228:	f9 80       	ldd	r15, Y+1	; 0x01
   1f22a:	0a 81       	ldd	r16, Y+2	; 0x02
   1f22c:	1b 81       	ldd	r17, Y+3	; 0x03
   1f22e:	c8 52       	subi	r28, 0x28	; 40
   1f230:	d1 40       	sbci	r29, 0x01	; 1
   1f232:	bb 27       	eor	r27, r27
   1f234:	a1 2f       	mov	r26, r17
   1f236:	90 2f       	mov	r25, r16
   1f238:	8f 2d       	mov	r24, r15
   1f23a:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
		PrintHexByte((wordMemoryAddress) & 0x00ff);
   1f23e:	c8 5d       	subi	r28, 0xD8	; 216
   1f240:	de 4f       	sbci	r29, 0xFE	; 254
   1f242:	88 81       	ld	r24, Y
   1f244:	c8 52       	subi	r28, 0x28	; 40
   1f246:	d1 40       	sbci	r29, 0x01	; 1
   1f248:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f24c:	70 e2       	ldi	r23, 0x20	; 32
   1f24e:	f7 2e       	mov	r15, r23
   1f250:	f0 92 c6 00 	sts	0x00C6, r15
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f254:	80 91 c0 00 	lds	r24, 0x00C0
   1f258:	86 ff       	sbrs	r24, 6
   1f25a:	fc cf       	rjmp	.-8      	; 0x1f254 <main+0x862>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f25c:	80 91 c0 00 	lds	r24, 0x00C0
   1f260:	80 64       	ori	r24, 0x40	; 64
   1f262:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f266:	0d e3       	ldi	r16, 0x3D	; 61
   1f268:	00 93 c6 00 	sts	0x00C6, r16
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f26c:	80 91 c0 00 	lds	r24, 0x00C0
   1f270:	86 ff       	sbrs	r24, 6
   1f272:	fc cf       	rjmp	.-8      	; 0x1f26c <main+0x87a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f274:	80 91 c0 00 	lds	r24, 0x00C0
   1f278:	80 64       	ori	r24, 0x40	; 64
   1f27a:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f27e:	10 e2       	ldi	r17, 0x20	; 32
   1f280:	10 93 c6 00 	sts	0x00C6, r17
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f284:	80 91 c0 00 	lds	r24, 0x00C0
   1f288:	86 ff       	sbrs	r24, 6
   1f28a:	fc cf       	rjmp	.-8      	; 0x1f284 <main+0x892>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f28c:	80 91 c0 00 	lds	r24, 0x00C0
   1f290:	80 64       	ori	r24, 0x40	; 64
   1f292:	80 93 c0 00 	sts	0x00C0, r24
		sendchar('=');
		sendchar(0x20);

	
		//*	the AVR is LITTLE ENDIAN, swap the byte order
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
   1f296:	8b be       	out	0x3b, r8	; 59
   1f298:	f3 01       	movw	r30, r6
   1f29a:	27 91       	elpm	r18, Z+
   1f29c:	c4 5d       	subi	r28, 0xD4	; 212
   1f29e:	de 4f       	sbci	r29, 0xFE	; 254
   1f2a0:	28 83       	st	Y, r18
   1f2a2:	cc 52       	subi	r28, 0x2C	; 44
   1f2a4:	d1 40       	sbci	r29, 0x01	; 1
   1f2a6:	a2 2e       	mov	r10, r18
   1f2a8:	bb 24       	eor	r11, r11
   1f2aa:	cc 24       	eor	r12, r12
   1f2ac:	dd 24       	eor	r13, r13
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
   1f2ae:	08 94       	sec
   1f2b0:	61 1c       	adc	r6, r1
   1f2b2:	71 1c       	adc	r7, r1
   1f2b4:	81 1c       	adc	r8, r1
   1f2b6:	91 1c       	adc	r9, r1
   1f2b8:	8b be       	out	0x3b, r8	; 59
   1f2ba:	f3 01       	movw	r30, r6
   1f2bc:	87 91       	elpm	r24, Z+
   1f2be:	28 2e       	mov	r2, r24
   1f2c0:	33 24       	eor	r3, r3
   1f2c2:	44 24       	eor	r4, r4
   1f2c4:	55 24       	eor	r5, r5
		word1	=	(byte2 << 8) + byte1;
   1f2c6:	14 2d       	mov	r17, r4
   1f2c8:	03 2d       	mov	r16, r3
   1f2ca:	f2 2c       	mov	r15, r2
   1f2cc:	ee 24       	eor	r14, r14
   1f2ce:	ea 0c       	add	r14, r10
   1f2d0:	fb 1c       	adc	r15, r11
   1f2d2:	0c 1d       	adc	r16, r12
   1f2d4:	1d 1d       	adc	r17, r13

		byte3	=	pgm_read_byte_far(myMemoryPtr++);
   1f2d6:	08 94       	sec
   1f2d8:	61 1c       	adc	r6, r1
   1f2da:	71 1c       	adc	r7, r1
   1f2dc:	81 1c       	adc	r8, r1
   1f2de:	91 1c       	adc	r9, r1
   1f2e0:	8b be       	out	0x3b, r8	; 59
   1f2e2:	f3 01       	movw	r30, r6
   1f2e4:	37 91       	elpm	r19, Z+
   1f2e6:	c3 5d       	subi	r28, 0xD3	; 211
   1f2e8:	de 4f       	sbci	r29, 0xFE	; 254
   1f2ea:	38 83       	st	Y, r19
   1f2ec:	cd 52       	subi	r28, 0x2D	; 45
   1f2ee:	d1 40       	sbci	r29, 0x01	; 1
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
   1f2f0:	08 94       	sec
   1f2f2:	61 1c       	adc	r6, r1
   1f2f4:	71 1c       	adc	r7, r1
   1f2f6:	81 1c       	adc	r8, r1
   1f2f8:	91 1c       	adc	r9, r1
   1f2fa:	8b be       	out	0x3b, r8	; 59
   1f2fc:	f3 01       	movw	r30, r6
   1f2fe:	47 91       	elpm	r20, Z+
   1f300:	c2 5d       	subi	r28, 0xD2	; 210
   1f302:	de 4f       	sbci	r29, 0xFE	; 254
   1f304:	48 83       	st	Y, r20
   1f306:	ce 52       	subi	r28, 0x2E	; 46
   1f308:	d1 40       	sbci	r29, 0x01	; 1
   1f30a:	2d ef       	ldi	r18, 0xFD	; 253
   1f30c:	3f ef       	ldi	r19, 0xFF	; 255
   1f30e:	4f ef       	ldi	r20, 0xFF	; 255
   1f310:	5f ef       	ldi	r21, 0xFF	; 255
   1f312:	62 0e       	add	r6, r18
   1f314:	73 1e       	adc	r7, r19
   1f316:	84 1e       	adc	r8, r20
   1f318:	95 1e       	adc	r9, r21
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
   1f31a:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f31e:	30 e2       	ldi	r19, 0x20	; 32
   1f320:	30 93 c6 00 	sts	0x00C6, r19
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f324:	80 91 c0 00 	lds	r24, 0x00C0
   1f328:	86 ff       	sbrs	r24, 6
   1f32a:	fc cf       	rjmp	.-8      	; 0x1f324 <main+0x932>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f32c:	80 91 c0 00 	lds	r24, 0x00C0
   1f330:	80 64       	ori	r24, 0x40	; 64
   1f332:	80 93 c0 00 	sts	0x00C0, r24
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
		sendchar(0x20);
		PrintHexByte(byte1);
   1f336:	c4 5d       	subi	r28, 0xD4	; 212
   1f338:	de 4f       	sbci	r29, 0xFE	; 254
   1f33a:	88 81       	ld	r24, Y
   1f33c:	cc 52       	subi	r28, 0x2C	; 44
   1f33e:	d1 40       	sbci	r29, 0x01	; 1
   1f340:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f344:	40 e2       	ldi	r20, 0x20	; 32
   1f346:	40 93 c6 00 	sts	0x00C6, r20
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f34a:	80 91 c0 00 	lds	r24, 0x00C0
   1f34e:	86 ff       	sbrs	r24, 6
   1f350:	fc cf       	rjmp	.-8      	; 0x1f34a <main+0x958>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f352:	80 91 c0 00 	lds	r24, 0x00C0
   1f356:	80 64       	ori	r24, 0x40	; 64
   1f358:	80 93 c0 00 	sts	0x00C0, r24

		PrintHexByte(byte2);
		sendchar(0x20);
		PrintHexByte(byte1);
		sendchar(0x20);
		PrintHexByte(byte4);
   1f35c:	c2 5d       	subi	r28, 0xD2	; 210
   1f35e:	de 4f       	sbci	r29, 0xFE	; 254
   1f360:	88 81       	ld	r24, Y
   1f362:	ce 52       	subi	r28, 0x2E	; 46
   1f364:	d1 40       	sbci	r29, 0x01	; 1
   1f366:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f36a:	50 e2       	ldi	r21, 0x20	; 32
   1f36c:	50 93 c6 00 	sts	0x00C6, r21
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f370:	80 91 c0 00 	lds	r24, 0x00C0
   1f374:	86 ff       	sbrs	r24, 6
   1f376:	fc cf       	rjmp	.-8      	; 0x1f370 <main+0x97e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f378:	80 91 c0 00 	lds	r24, 0x00C0
   1f37c:	80 64       	ori	r24, 0x40	; 64
   1f37e:	80 93 c0 00 	sts	0x00C0, r24
		sendchar(0x20);
		PrintHexByte(byte1);
		sendchar(0x20);
		PrintHexByte(byte4);
		sendchar(0x20);
		PrintHexByte(byte3);
   1f382:	c3 5d       	subi	r28, 0xD3	; 211
   1f384:	de 4f       	sbci	r29, 0xFE	; 254
   1f386:	88 81       	ld	r24, Y
   1f388:	cd 52       	subi	r28, 0x2D	; 45
   1f38a:	d1 40       	sbci	r29, 0x01	; 1
   1f38c:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f390:	60 e2       	ldi	r22, 0x20	; 32
   1f392:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f396:	80 91 c0 00 	lds	r24, 0x00C0
   1f39a:	86 ff       	sbrs	r24, 6
   1f39c:	fc cf       	rjmp	.-8      	; 0x1f396 <main+0x9a4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f39e:	80 91 c0 00 	lds	r24, 0x00C0
   1f3a2:	80 64       	ori	r24, 0x40	; 64
   1f3a4:	80 93 c0 00 	sts	0x00C0, r24
		PrintHexByte(byte4);
		sendchar(0x20);
		PrintHexByte(byte3);
		sendchar(0x20);
	
		if (word1 == 0xffff)
   1f3a8:	7f ef       	ldi	r23, 0xFF	; 255
   1f3aa:	e7 16       	cp	r14, r23
   1f3ac:	7f ef       	ldi	r23, 0xFF	; 255
   1f3ae:	f7 06       	cpc	r15, r23
   1f3b0:	70 e0       	ldi	r23, 0x00	; 0
   1f3b2:	07 07       	cpc	r16, r23
   1f3b4:	70 e0       	ldi	r23, 0x00	; 0
   1f3b6:	17 07       	cpc	r17, r23
   1f3b8:	31 f4       	brne	.+12     	; 0x1f3c6 <main+0x9d4>
		{
			PrintFromPROGMEM(gTextMsg_noVector, 0);
   1f3ba:	8e e0       	ldi	r24, 0x0E	; 14
   1f3bc:	92 ee       	ldi	r25, 0xE2	; 226
   1f3be:	60 e0       	ldi	r22, 0x00	; 0
   1f3c0:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
   1f3c4:	df c0       	rjmp	.+446    	; 0x1f584 <main+0xb92>
		}
		else if ((word1 & 0xc000) == 0xc000)
   1f3c6:	d8 01       	movw	r26, r16
   1f3c8:	c7 01       	movw	r24, r14
   1f3ca:	80 70       	andi	r24, 0x00	; 0
   1f3cc:	90 7c       	andi	r25, 0xC0	; 192
   1f3ce:	a0 70       	andi	r26, 0x00	; 0
   1f3d0:	b0 70       	andi	r27, 0x00	; 0
   1f3d2:	80 50       	subi	r24, 0x00	; 0
   1f3d4:	90 4c       	sbci	r25, 0xC0	; 192
   1f3d6:	a0 40       	sbci	r26, 0x00	; 0
   1f3d8:	b0 40       	sbci	r27, 0x00	; 0
   1f3da:	d1 f5       	brne	.+116    	; 0x1f450 <main+0xa5e>
		{
			//*	rjmp instruction
			realitiveAddr	=	word1 & 0x3FFF;
   1f3dc:	2f ef       	ldi	r18, 0xFF	; 255
   1f3de:	3f e3       	ldi	r19, 0x3F	; 63
   1f3e0:	40 e0       	ldi	r20, 0x00	; 0
   1f3e2:	50 e0       	ldi	r21, 0x00	; 0
   1f3e4:	e2 22       	and	r14, r18
   1f3e6:	f3 22       	and	r15, r19
   1f3e8:	04 23       	and	r16, r20
   1f3ea:	15 23       	and	r17, r21
			absoluteAddr	=	wordMemoryAddress + realitiveAddr;	//*	add the offset to the current address
   1f3ec:	c8 5d       	subi	r28, 0xD8	; 216
   1f3ee:	de 4f       	sbci	r29, 0xFE	; 254
   1f3f0:	a8 80       	ld	r10, Y
   1f3f2:	b9 80       	ldd	r11, Y+1	; 0x01
   1f3f4:	ca 80       	ldd	r12, Y+2	; 0x02
   1f3f6:	db 80       	ldd	r13, Y+3	; 0x03
   1f3f8:	c8 52       	subi	r28, 0x28	; 40
   1f3fa:	d1 40       	sbci	r29, 0x01	; 1
   1f3fc:	ae 0c       	add	r10, r14
   1f3fe:	bf 1c       	adc	r11, r15
   1f400:	c0 1e       	adc	r12, r16
   1f402:	d1 1e       	adc	r13, r17
			absoluteAddr	=	absoluteAddr << 1;					//*	multiply by 2 for byte address
   1f404:	aa 0c       	add	r10, r10
   1f406:	bb 1c       	adc	r11, r11
   1f408:	cc 1c       	adc	r12, r12
   1f40a:	dd 1c       	adc	r13, r13

			PrintFromPROGMEM(gTextMsg_rjmp, 0);
   1f40c:	88 e1       	ldi	r24, 0x18	; 24
   1f40e:	92 ee       	ldi	r25, 0xE2	; 226
   1f410:	60 e0       	ldi	r22, 0x00	; 0
   1f412:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
			PrintHexByte((realitiveAddr >> 8) & 0x00ff);
   1f416:	bb 27       	eor	r27, r27
   1f418:	a1 2f       	mov	r26, r17
   1f41a:	90 2f       	mov	r25, r16
   1f41c:	8f 2d       	mov	r24, r15
   1f41e:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
			PrintHexByte((realitiveAddr) & 0x00ff);
   1f422:	8e 2d       	mov	r24, r14
   1f424:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f428:	30 e2       	ldi	r19, 0x20	; 32
   1f42a:	30 93 c6 00 	sts	0x00C6, r19
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f42e:	80 91 c0 00 	lds	r24, 0x00C0
   1f432:	86 ff       	sbrs	r24, 6
   1f434:	fc cf       	rjmp	.-8      	; 0x1f42e <main+0xa3c>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f436:	80 91 c0 00 	lds	r24, 0x00C0
   1f43a:	80 64       	ori	r24, 0x40	; 64
   1f43c:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f440:	4e e3       	ldi	r20, 0x3E	; 62
   1f442:	40 93 c6 00 	sts	0x00C6, r20
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f446:	80 91 c0 00 	lds	r24, 0x00C0
   1f44a:	86 ff       	sbrs	r24, 6
   1f44c:	fc cf       	rjmp	.-8      	; 0x1f446 <main+0xa54>
   1f44e:	87 c0       	rjmp	.+270    	; 0x1f55e <main+0xb6c>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
			PrintHexByte((absoluteAddr) & 0x00ff);
	
		}
		else if ((word1 & 0xfE0E) == 0x940c)
   1f450:	6e e0       	ldi	r22, 0x0E	; 14
   1f452:	7e ef       	ldi	r23, 0xFE	; 254
   1f454:	80 e0       	ldi	r24, 0x00	; 0
   1f456:	90 e0       	ldi	r25, 0x00	; 0
   1f458:	e6 22       	and	r14, r22
   1f45a:	f7 22       	and	r15, r23
   1f45c:	08 23       	and	r16, r24
   1f45e:	19 23       	and	r17, r25
   1f460:	7c e0       	ldi	r23, 0x0C	; 12
   1f462:	e7 16       	cp	r14, r23
   1f464:	74 e9       	ldi	r23, 0x94	; 148
   1f466:	f7 06       	cpc	r15, r23
   1f468:	70 e0       	ldi	r23, 0x00	; 0
   1f46a:	07 07       	cpc	r16, r23
   1f46c:	70 e0       	ldi	r23, 0x00	; 0
   1f46e:	17 07       	cpc	r17, r23
   1f470:	09 f0       	breq	.+2      	; 0x1f474 <main+0xa82>
   1f472:	88 c0       	rjmp	.+272    	; 0x1f584 <main+0xb92>
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   1f474:	c2 5d       	subi	r28, 0xD2	; 210
   1f476:	de 4f       	sbci	r29, 0xFE	; 254
   1f478:	88 81       	ld	r24, Y
   1f47a:	ce 52       	subi	r28, 0x2E	; 46
   1f47c:	d1 40       	sbci	r29, 0x01	; 1
   1f47e:	e8 2e       	mov	r14, r24
   1f480:	ff 24       	eor	r15, r15
   1f482:	00 e0       	ldi	r16, 0x00	; 0
   1f484:	10 e0       	ldi	r17, 0x00	; 0
   1f486:	10 2f       	mov	r17, r16
   1f488:	0f 2d       	mov	r16, r15
   1f48a:	fe 2c       	mov	r15, r14
   1f48c:	ee 24       	eor	r14, r14
   1f48e:	c3 5d       	subi	r28, 0xD3	; 211
   1f490:	de 4f       	sbci	r29, 0xFE	; 254
   1f492:	98 81       	ld	r25, Y
   1f494:	cd 52       	subi	r28, 0x2D	; 45
   1f496:	d1 40       	sbci	r29, 0x01	; 1
   1f498:	e9 0e       	add	r14, r25
   1f49a:	f1 1c       	adc	r15, r1
   1f49c:	01 1d       	adc	r16, r1
   1f49e:	11 1d       	adc	r17, r1
   1f4a0:	d6 01       	movw	r26, r12
   1f4a2:	c5 01       	movw	r24, r10
   1f4a4:	81 70       	andi	r24, 0x01	; 1
   1f4a6:	90 70       	andi	r25, 0x00	; 0
   1f4a8:	a0 70       	andi	r26, 0x00	; 0
   1f4aa:	b0 70       	andi	r27, 0x00	; 0
   1f4ac:	dc 01       	movw	r26, r24
   1f4ae:	99 27       	eor	r25, r25
   1f4b0:	88 27       	eor	r24, r24
   1f4b2:	e8 0e       	add	r14, r24
   1f4b4:	f9 1e       	adc	r15, r25
   1f4b6:	0a 1f       	adc	r16, r26
   1f4b8:	1b 1f       	adc	r17, r27
   1f4ba:	20 ef       	ldi	r18, 0xF0	; 240
   1f4bc:	30 e0       	ldi	r19, 0x00	; 0
   1f4be:	40 e0       	ldi	r20, 0x00	; 0
   1f4c0:	50 e0       	ldi	r21, 0x00	; 0
   1f4c2:	a2 22       	and	r10, r18
   1f4c4:	b3 22       	and	r11, r19
   1f4c6:	c4 22       	and	r12, r20
   1f4c8:	d5 22       	and	r13, r21
   1f4ca:	f1 e1       	ldi	r31, 0x11	; 17
   1f4cc:	aa 0c       	add	r10, r10
   1f4ce:	bb 1c       	adc	r11, r11
   1f4d0:	cc 1c       	adc	r12, r12
   1f4d2:	dd 1c       	adc	r13, r13
   1f4d4:	fa 95       	dec	r31
   1f4d6:	d1 f7       	brne	.-12     	; 0x1f4cc <main+0xada>
   1f4d8:	ea 0c       	add	r14, r10
   1f4da:	fb 1c       	adc	r15, r11
   1f4dc:	0c 1d       	adc	r16, r12
   1f4de:	1d 1d       	adc	r17, r13
   1f4e0:	41 e0       	ldi	r20, 0x01	; 1
   1f4e2:	50 e0       	ldi	r21, 0x00	; 0
   1f4e4:	60 e0       	ldi	r22, 0x00	; 0
   1f4e6:	70 e0       	ldi	r23, 0x00	; 0
   1f4e8:	24 22       	and	r2, r20
   1f4ea:	35 22       	and	r3, r21
   1f4ec:	46 22       	and	r4, r22
   1f4ee:	57 22       	and	r5, r23
   1f4f0:	e5 e1       	ldi	r30, 0x15	; 21
   1f4f2:	22 0c       	add	r2, r2
   1f4f4:	33 1c       	adc	r3, r3
   1f4f6:	44 1c       	adc	r4, r4
   1f4f8:	55 1c       	adc	r5, r5
   1f4fa:	ea 95       	dec	r30
   1f4fc:	d1 f7       	brne	.-12     	; 0x1f4f2 <main+0xb00>
   1f4fe:	e2 0c       	add	r14, r2
   1f500:	f3 1c       	adc	r15, r3
   1f502:	04 1d       	adc	r16, r4
   1f504:	15 1d       	adc	r17, r5
								((byte1 & 0xf0) << 17) +
								((byte2 & 0x01) << 21) +
								word2;
							
			absoluteAddr	=	myFullAddress << 1;
   1f506:	57 01       	movw	r10, r14
   1f508:	68 01       	movw	r12, r16
   1f50a:	aa 0c       	add	r10, r10
   1f50c:	bb 1c       	adc	r11, r11
   1f50e:	cc 1c       	adc	r12, r12
   1f510:	dd 1c       	adc	r13, r13
							
			PrintFromPROGMEM(gTextMsg_jmp, 0);
   1f512:	8f e1       	ldi	r24, 0x1F	; 31
   1f514:	92 ee       	ldi	r25, 0xE2	; 226
   1f516:	60 e0       	ldi	r22, 0x00	; 0
   1f518:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
   1f51c:	c8 01       	movw	r24, r16
   1f51e:	aa 27       	eor	r26, r26
   1f520:	bb 27       	eor	r27, r27
   1f522:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
   1f526:	bb 27       	eor	r27, r27
   1f528:	a1 2f       	mov	r26, r17
   1f52a:	90 2f       	mov	r25, r16
   1f52c:	8f 2d       	mov	r24, r15
   1f52e:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
			PrintHexByte((myFullAddress) & 0x00ff);
   1f532:	8e 2d       	mov	r24, r14
   1f534:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f538:	50 e2       	ldi	r21, 0x20	; 32
   1f53a:	50 93 c6 00 	sts	0x00C6, r21
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f53e:	80 91 c0 00 	lds	r24, 0x00C0
   1f542:	86 ff       	sbrs	r24, 6
   1f544:	fc cf       	rjmp	.-8      	; 0x1f53e <main+0xb4c>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f546:	80 91 c0 00 	lds	r24, 0x00C0
   1f54a:	80 64       	ori	r24, 0x40	; 64
   1f54c:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f550:	6e e3       	ldi	r22, 0x3E	; 62
   1f552:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f556:	80 91 c0 00 	lds	r24, 0x00C0
   1f55a:	86 ff       	sbrs	r24, 6
   1f55c:	fc cf       	rjmp	.-8      	; 0x1f556 <main+0xb64>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f55e:	80 91 c0 00 	lds	r24, 0x00C0
   1f562:	80 64       	ori	r24, 0x40	; 64
   1f564:	80 93 c0 00 	sts	0x00C0, r24
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
			PrintHexByte((myFullAddress) & 0x00ff);
			sendchar(0x20);
			sendchar('>');
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
   1f568:	c6 01       	movw	r24, r12
   1f56a:	aa 27       	eor	r26, r26
   1f56c:	bb 27       	eor	r27, r27
   1f56e:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
   1f572:	bb 27       	eor	r27, r27
   1f574:	ad 2d       	mov	r26, r13
   1f576:	9c 2d       	mov	r25, r12
   1f578:	8b 2d       	mov	r24, r11
   1f57a:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
			PrintHexByte((absoluteAddr) & 0x00ff);
   1f57e:	8a 2d       	mov	r24, r10
   1f580:	0e 94 7c f3 	call	0x1e6f8	; 0x1e6f8 <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f584:	70 e2       	ldi	r23, 0x20	; 32
   1f586:	70 93 c6 00 	sts	0x00C6, r23
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f58a:	80 91 c0 00 	lds	r24, 0x00C0
   1f58e:	86 ff       	sbrs	r24, 6
   1f590:	fc cf       	rjmp	.-8      	; 0x1f58a <main+0xb98>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f592:	80 91 c0 00 	lds	r24, 0x00C0
   1f596:	80 64       	ori	r24, 0x40	; 64
   1f598:	80 93 c0 00 	sts	0x00C0, r24
			PrintHexByte((absoluteAddr) & 0x00ff);
		}

	#if defined(_INTERRUPT_NAMES_DEFINED_)
		sendchar(0x20);
		stringPointer	=	pgm_read_word_far(&(gInterruptNameTable[vectorIndex]));
   1f59c:	cc 5d       	subi	r28, 0xDC	; 220
   1f59e:	de 4f       	sbci	r29, 0xFE	; 254
   1f5a0:	e8 81       	ld	r30, Y
   1f5a2:	f9 81       	ldd	r31, Y+1	; 0x01
   1f5a4:	c4 52       	subi	r28, 0x24	; 36
   1f5a6:	d1 40       	sbci	r29, 0x01	; 1
   1f5a8:	cf 01       	movw	r24, r30
   1f5aa:	aa 27       	eor	r26, r26
   1f5ac:	97 fd       	sbrc	r25, 7
   1f5ae:	a0 95       	com	r26
   1f5b0:	ba 2f       	mov	r27, r26
		PrintFromPROGMEM((char *)stringPointer, 0);
   1f5b2:	ab bf       	out	0x3b, r26	; 59
   1f5b4:	fc 01       	movw	r30, r24
   1f5b6:	87 91       	elpm	r24, Z+
   1f5b8:	96 91       	elpm	r25, Z+
   1f5ba:	60 e0       	ldi	r22, 0x00	; 0
   1f5bc:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
	#endif
		PrintNewLine();
   1f5c0:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>
   1f5c4:	cc 5d       	subi	r28, 0xDC	; 220
   1f5c6:	de 4f       	sbci	r29, 0xFE	; 254
   1f5c8:	08 81       	ld	r16, Y
   1f5ca:	19 81       	ldd	r17, Y+1	; 0x01
   1f5cc:	c4 52       	subi	r28, 0x24	; 36
   1f5ce:	d1 40       	sbci	r29, 0x01	; 1
   1f5d0:	0e 5f       	subi	r16, 0xFE	; 254
   1f5d2:	1f 4f       	sbci	r17, 0xFF	; 255
   1f5d4:	cc 5d       	subi	r28, 0xDC	; 220
   1f5d6:	de 4f       	sbci	r29, 0xFE	; 254
   1f5d8:	19 83       	std	Y+1, r17	; 0x01
   1f5da:	08 83       	st	Y, r16
   1f5dc:	c4 52       	subi	r28, 0x24	; 36
   1f5de:	d1 40       	sbci	r29, 0x01	; 1
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
   1f5e0:	ca 5d       	subi	r28, 0xDA	; 218
   1f5e2:	de 4f       	sbci	r29, 0xFE	; 254
   1f5e4:	28 81       	ld	r18, Y
   1f5e6:	39 81       	ldd	r19, Y+1	; 0x01
   1f5e8:	c6 52       	subi	r28, 0x26	; 38
   1f5ea:	d1 40       	sbci	r29, 0x01	; 1
   1f5ec:	29 33       	cpi	r18, 0x39	; 57
   1f5ee:	31 05       	cpc	r19, r1
   1f5f0:	09 f4       	brne	.+2      	; 0x1f5f4 <main+0xc02>
   1f5f2:	17 cb       	rjmp	.-2514   	; 0x1ec22 <main+0x230>
   1f5f4:	44 e0       	ldi	r20, 0x04	; 4
   1f5f6:	50 e0       	ldi	r21, 0x00	; 0
   1f5f8:	60 e0       	ldi	r22, 0x00	; 0
   1f5fa:	70 e0       	ldi	r23, 0x00	; 0
   1f5fc:	64 0e       	add	r6, r20
   1f5fe:	75 1e       	adc	r7, r21
   1f600:	86 1e       	adc	r8, r22
   1f602:	97 1e       	adc	r9, r23
   1f604:	c9 cd       	rjmp	.-1134   	; 0x1f198 <main+0x7a6>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
				VectorDisplay();
				break;

			case 'Y':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 2);
   1f606:	80 e3       	ldi	r24, 0x30	; 48
   1f608:	93 ee       	ldi	r25, 0xE3	; 227
   1f60a:	62 e0       	ldi	r22, 0x02	; 2
   1f60c:	0e 94 64 f3 	call	0x1e6c8	; 0x1e6c8 <PrintFromPROGMEMln>
static void	AVR_PortOutput(void)
{
char	portLetter;
char	getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);
   1f610:	84 e2       	ldi	r24, 0x24	; 36
   1f612:	92 ee       	ldi	r25, 0xE2	; 226
   1f614:	60 e0       	ldi	r22, 0x00	; 0
   1f616:	0e 94 2d f3 	call	0x1e65a	; 0x1e65a <PrintFromPROGMEM>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   1f61a:	80 91 c0 00 	lds	r24, 0x00C0
   1f61e:	87 ff       	sbrs	r24, 7
   1f620:	fc cf       	rjmp	.-8      	; 0x1f61a <main+0xc28>
	{
		// wait for data
	}
	return UART_DATA_REG;
   1f622:	10 91 c6 00 	lds	r17, 0x00C6
char	getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);

	portLetter	=	recchar();
	portLetter	=	portLetter & 0x5f;
   1f626:	1f 75       	andi	r17, 0x5F	; 95
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f628:	10 93 c6 00 	sts	0x00C6, r17
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1f62c:	80 91 c0 00 	lds	r24, 0x00C0
   1f630:	86 ff       	sbrs	r24, 6
   1f632:	fc cf       	rjmp	.-8      	; 0x1f62c <main+0xc3a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1f634:	80 91 c0 00 	lds	r24, 0x00C0
   1f638:	80 64       	ori	r24, 0x40	; 64
   1f63a:	80 93 c0 00 	sts	0x00C0, r24
	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);

	portLetter	=	recchar();
	portLetter	=	portLetter & 0x5f;
	sendchar(portLetter);
	PrintNewLine();
   1f63e:	0e 94 4b f3 	call	0x1e696	; 0x1e696 <PrintNewLine>

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
   1f642:	81 2f       	mov	r24, r17
   1f644:	81 54       	subi	r24, 0x41	; 65
   1f646:	8a 31       	cpi	r24, 0x1A	; 26
   1f648:	08 f0       	brcs	.+2      	; 0x1f64c <main+0xc5a>
   1f64a:	36 c1       	rjmp	.+620    	; 0x1f8b8 <main+0xec6>
	{
		getCharFlag	=	true;
		switch(portLetter)
   1f64c:	16 34       	cpi	r17, 0x46	; 70
   1f64e:	09 f4       	brne	.+2      	; 0x1f652 <main+0xc60>
   1f650:	95 c0       	rjmp	.+298    	; 0x1f77c <main+0xd8a>
   1f652:	17 34       	cpi	r17, 0x47	; 71
   1f654:	90 f4       	brcc	.+36     	; 0x1f67a <main+0xc88>
   1f656:	13 34       	cpi	r17, 0x43	; 67
   1f658:	09 f4       	brne	.+2      	; 0x1f65c <main+0xc6a>
   1f65a:	4e c0       	rjmp	.+156    	; 0x1f6f8 <main+0xd06>
   1f65c:	14 34       	cpi	r17, 0x44	; 68
   1f65e:	30 f4       	brcc	.+12     	; 0x1f66c <main+0xc7a>
   1f660:	11 34       	cpi	r17, 0x41	; 65
   1f662:	f1 f0       	breq	.+60     	; 0x1f6a0 <main+0xcae>
   1f664:	12 34       	cpi	r17, 0x42	; 66
   1f666:	09 f0       	breq	.+2      	; 0x1f66a <main+0xc78>
   1f668:	1d c1       	rjmp	.+570    	; 0x1f8a4 <main+0xeb2>
   1f66a:	30 c0       	rjmp	.+96     	; 0x1f6cc <main+0xcda>
   1f66c:	14 34       	cpi	r17, 0x44	; 68
   1f66e:	09 f4       	brne	.+2      	; 0x1f672 <main+0xc80>
   1f670:	59 c0       	rjmp	.+178    	; 0x1f724 <main+0xd32>
   1f672:	15 34       	cpi	r17, 0x45	; 69
   1f674:	09 f0       	breq	.+2      	; 0x1f678 <main+0xc86>
   1f676:	16 c1       	rjmp	.+556    	; 0x1f8a4 <main+0xeb2>
   1f678:	6b c0       	rjmp	.+214    	; 0x1f750 <main+0xd5e>
   1f67a:	1a 34       	cpi	r17, 0x4A	; 74
   1f67c:	09 f4       	brne	.+2      	; 0x1f680 <main+0xc8e>
   1f67e:	c4 c0       	rjmp	.+392    	; 0x1f808 <main+0xe16>
   1f680:	1b 34       	cpi	r17, 0x4B	; 75
   1f682:	38 f4       	brcc	.+14     	; 0x1f692 <main+0xca0>
   1f684:	17 34       	cpi	r17, 0x47	; 71
   1f686:	09 f4       	brne	.+2      	; 0x1f68a <main+0xc98>
   1f688:	8f c0       	rjmp	.+286    	; 0x1f7a8 <main+0xdb6>
   1f68a:	18 34       	cpi	r17, 0x48	; 72
   1f68c:	09 f0       	breq	.+2      	; 0x1f690 <main+0xc9e>
   1f68e:	0a c1       	rjmp	.+532    	; 0x1f8a4 <main+0xeb2>
   1f690:	a1 c0       	rjmp	.+322    	; 0x1f7d4 <main+0xde2>
   1f692:	1b 34       	cpi	r17, 0x4B	; 75
   1f694:	09 f4       	brne	.+2      	; 0x1f698 <main+0xca6>
   1f696:	d2 c0       	rjmp	.+420    	; 0x1f83c <main+0xe4a>
   1f698:	1c 34       	cpi	r17, 0x4C	; 76
   1f69a:	09 f0       	breq	.+2      	; 0x1f69e <main+0xcac>
   1f69c:	03 c1       	rjmp	.+518    	; 0x1f8a4 <main+0xeb2>
   1f69e:	e8 c0       	rjmp	.+464    	; 0x1f870 <main+0xe7e>
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
   1f6a0:	8f ef       	ldi	r24, 0xFF	; 255
   1f6a2:	81 b9       	out	0x01, r24	; 1
   1f6a4:	0d c0       	rjmp	.+26     	; 0x1f6c0 <main+0xcce>
				while (!Serial_Available())
				{
					PORTA	^=	0xff;
   1f6a6:	82 b1       	in	r24, 0x02	; 2
   1f6a8:	80 95       	com	r24
   1f6aa:	82 b9       	out	0x02, r24	; 2
   1f6ac:	80 e0       	ldi	r24, 0x00	; 0
   1f6ae:	90 e0       	ldi	r25, 0x00	; 0
   1f6b0:	e0 ed       	ldi	r30, 0xD0	; 208
   1f6b2:	f7 e0       	ldi	r31, 0x07	; 7
   1f6b4:	31 97       	sbiw	r30, 0x01	; 1
   1f6b6:	f1 f7       	brne	.-4      	; 0x1f6b4 <main+0xcc2>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f6b8:	01 96       	adiw	r24, 0x01	; 1
   1f6ba:	88 3c       	cpi	r24, 0xC8	; 200
   1f6bc:	91 05       	cpc	r25, r1
   1f6be:	c1 f7       	brne	.-16     	; 0x1f6b0 <main+0xcbe>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f6c0:	80 91 c0 00 	lds	r24, 0x00C0
		switch(portLetter)
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
				while (!Serial_Available())
   1f6c4:	87 ff       	sbrs	r24, 7
   1f6c6:	ef cf       	rjmp	.-34     	; 0x1f6a6 <main+0xcb4>
				{
					PORTA	^=	0xff;
					delay_ms(200);
				}
				PORTA	=	0;
   1f6c8:	12 b8       	out	0x02, r1	; 2
   1f6ca:	ef c0       	rjmp	.+478    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
   1f6cc:	8f ef       	ldi	r24, 0xFF	; 255
   1f6ce:	84 b9       	out	0x04, r24	; 4
   1f6d0:	0d c0       	rjmp	.+26     	; 0x1f6ec <main+0xcfa>
				while (!Serial_Available())
				{
					PORTB	^=	0xff;
   1f6d2:	85 b1       	in	r24, 0x05	; 5
   1f6d4:	80 95       	com	r24
   1f6d6:	85 b9       	out	0x05, r24	; 5
   1f6d8:	80 e0       	ldi	r24, 0x00	; 0
   1f6da:	90 e0       	ldi	r25, 0x00	; 0
   1f6dc:	e0 ed       	ldi	r30, 0xD0	; 208
   1f6de:	f7 e0       	ldi	r31, 0x07	; 7
   1f6e0:	31 97       	sbiw	r30, 0x01	; 1
   1f6e2:	f1 f7       	brne	.-4      	; 0x1f6e0 <main+0xcee>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f6e4:	01 96       	adiw	r24, 0x01	; 1
   1f6e6:	88 3c       	cpi	r24, 0xC8	; 200
   1f6e8:	91 05       	cpc	r25, r1
   1f6ea:	c1 f7       	brne	.-16     	; 0x1f6dc <main+0xcea>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f6ec:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
				while (!Serial_Available())
   1f6f0:	87 ff       	sbrs	r24, 7
   1f6f2:	ef cf       	rjmp	.-34     	; 0x1f6d2 <main+0xce0>
				{
					PORTB	^=	0xff;
					delay_ms(200);
				}
				PORTB	=	0;
   1f6f4:	15 b8       	out	0x05, r1	; 5
   1f6f6:	d9 c0       	rjmp	.+434    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
   1f6f8:	8f ef       	ldi	r24, 0xFF	; 255
   1f6fa:	87 b9       	out	0x07, r24	; 7
   1f6fc:	0d c0       	rjmp	.+26     	; 0x1f718 <main+0xd26>
				while (!Serial_Available())
				{
					PORTC	^=	0xff;
   1f6fe:	88 b1       	in	r24, 0x08	; 8
   1f700:	80 95       	com	r24
   1f702:	88 b9       	out	0x08, r24	; 8
   1f704:	80 e0       	ldi	r24, 0x00	; 0
   1f706:	90 e0       	ldi	r25, 0x00	; 0
   1f708:	e0 ed       	ldi	r30, 0xD0	; 208
   1f70a:	f7 e0       	ldi	r31, 0x07	; 7
   1f70c:	31 97       	sbiw	r30, 0x01	; 1
   1f70e:	f1 f7       	brne	.-4      	; 0x1f70c <main+0xd1a>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f710:	01 96       	adiw	r24, 0x01	; 1
   1f712:	88 3c       	cpi	r24, 0xC8	; 200
   1f714:	91 05       	cpc	r25, r1
   1f716:	c1 f7       	brne	.-16     	; 0x1f708 <main+0xd16>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f718:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
				while (!Serial_Available())
   1f71c:	87 ff       	sbrs	r24, 7
   1f71e:	ef cf       	rjmp	.-34     	; 0x1f6fe <main+0xd0c>
				{
					PORTC	^=	0xff;
					delay_ms(200);
				}
				PORTC	=	0;
   1f720:	18 b8       	out	0x08, r1	; 8
   1f722:	c3 c0       	rjmp	.+390    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
   1f724:	8f ef       	ldi	r24, 0xFF	; 255
   1f726:	8a b9       	out	0x0a, r24	; 10
   1f728:	0d c0       	rjmp	.+26     	; 0x1f744 <main+0xd52>
				while (!Serial_Available())
				{
					PORTD	^=	0xff;
   1f72a:	8b b1       	in	r24, 0x0b	; 11
   1f72c:	80 95       	com	r24
   1f72e:	8b b9       	out	0x0b, r24	; 11
   1f730:	80 e0       	ldi	r24, 0x00	; 0
   1f732:	90 e0       	ldi	r25, 0x00	; 0
   1f734:	e0 ed       	ldi	r30, 0xD0	; 208
   1f736:	f7 e0       	ldi	r31, 0x07	; 7
   1f738:	31 97       	sbiw	r30, 0x01	; 1
   1f73a:	f1 f7       	brne	.-4      	; 0x1f738 <main+0xd46>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f73c:	01 96       	adiw	r24, 0x01	; 1
   1f73e:	88 3c       	cpi	r24, 0xC8	; 200
   1f740:	91 05       	cpc	r25, r1
   1f742:	c1 f7       	brne	.-16     	; 0x1f734 <main+0xd42>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f744:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
				while (!Serial_Available())
   1f748:	87 ff       	sbrs	r24, 7
   1f74a:	ef cf       	rjmp	.-34     	; 0x1f72a <main+0xd38>
				{
					PORTD	^=	0xff;
					delay_ms(200);
				}
				PORTD	=	0;
   1f74c:	1b b8       	out	0x0b, r1	; 11
   1f74e:	ad c0       	rjmp	.+346    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
   1f750:	8f ef       	ldi	r24, 0xFF	; 255
   1f752:	8d b9       	out	0x0d, r24	; 13
   1f754:	0d c0       	rjmp	.+26     	; 0x1f770 <main+0xd7e>
				while (!Serial_Available())
				{
					PORTE	^=	0xff;
   1f756:	8e b1       	in	r24, 0x0e	; 14
   1f758:	80 95       	com	r24
   1f75a:	8e b9       	out	0x0e, r24	; 14
   1f75c:	80 e0       	ldi	r24, 0x00	; 0
   1f75e:	90 e0       	ldi	r25, 0x00	; 0
   1f760:	e0 ed       	ldi	r30, 0xD0	; 208
   1f762:	f7 e0       	ldi	r31, 0x07	; 7
   1f764:	31 97       	sbiw	r30, 0x01	; 1
   1f766:	f1 f7       	brne	.-4      	; 0x1f764 <main+0xd72>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f768:	01 96       	adiw	r24, 0x01	; 1
   1f76a:	88 3c       	cpi	r24, 0xC8	; 200
   1f76c:	91 05       	cpc	r25, r1
   1f76e:	c1 f7       	brne	.-16     	; 0x1f760 <main+0xd6e>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f770:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
				while (!Serial_Available())
   1f774:	87 ff       	sbrs	r24, 7
   1f776:	ef cf       	rjmp	.-34     	; 0x1f756 <main+0xd64>
				{
					PORTE	^=	0xff;
					delay_ms(200);
				}
				PORTE	=	0;
   1f778:	1e b8       	out	0x0e, r1	; 14
   1f77a:	97 c0       	rjmp	.+302    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
   1f77c:	8f ef       	ldi	r24, 0xFF	; 255
   1f77e:	80 bb       	out	0x10, r24	; 16
   1f780:	0d c0       	rjmp	.+26     	; 0x1f79c <main+0xdaa>
				while (!Serial_Available())
				{
					PORTF	^=	0xff;
   1f782:	81 b3       	in	r24, 0x11	; 17
   1f784:	80 95       	com	r24
   1f786:	81 bb       	out	0x11, r24	; 17
   1f788:	80 e0       	ldi	r24, 0x00	; 0
   1f78a:	90 e0       	ldi	r25, 0x00	; 0
   1f78c:	e0 ed       	ldi	r30, 0xD0	; 208
   1f78e:	f7 e0       	ldi	r31, 0x07	; 7
   1f790:	31 97       	sbiw	r30, 0x01	; 1
   1f792:	f1 f7       	brne	.-4      	; 0x1f790 <main+0xd9e>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f794:	01 96       	adiw	r24, 0x01	; 1
   1f796:	88 3c       	cpi	r24, 0xC8	; 200
   1f798:	91 05       	cpc	r25, r1
   1f79a:	c1 f7       	brne	.-16     	; 0x1f78c <main+0xd9a>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f79c:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
				while (!Serial_Available())
   1f7a0:	87 ff       	sbrs	r24, 7
   1f7a2:	ef cf       	rjmp	.-34     	; 0x1f782 <main+0xd90>
				{
					PORTF	^=	0xff;
					delay_ms(200);
				}
				PORTF	=	0;
   1f7a4:	11 ba       	out	0x11, r1	; 17
   1f7a6:	81 c0       	rjmp	.+258    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
   1f7a8:	8f ef       	ldi	r24, 0xFF	; 255
   1f7aa:	83 bb       	out	0x13, r24	; 19
   1f7ac:	0d c0       	rjmp	.+26     	; 0x1f7c8 <main+0xdd6>
				while (!Serial_Available())
				{
					PORTG	^=	0xff;
   1f7ae:	84 b3       	in	r24, 0x14	; 20
   1f7b0:	80 95       	com	r24
   1f7b2:	84 bb       	out	0x14, r24	; 20
   1f7b4:	80 e0       	ldi	r24, 0x00	; 0
   1f7b6:	90 e0       	ldi	r25, 0x00	; 0
   1f7b8:	e0 ed       	ldi	r30, 0xD0	; 208
   1f7ba:	f7 e0       	ldi	r31, 0x07	; 7
   1f7bc:	31 97       	sbiw	r30, 0x01	; 1
   1f7be:	f1 f7       	brne	.-4      	; 0x1f7bc <main+0xdca>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f7c0:	01 96       	adiw	r24, 0x01	; 1
   1f7c2:	88 3c       	cpi	r24, 0xC8	; 200
   1f7c4:	91 05       	cpc	r25, r1
   1f7c6:	c1 f7       	brne	.-16     	; 0x1f7b8 <main+0xdc6>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f7c8:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
				while (!Serial_Available())
   1f7cc:	87 ff       	sbrs	r24, 7
   1f7ce:	ef cf       	rjmp	.-34     	; 0x1f7ae <main+0xdbc>
				{
					PORTG	^=	0xff;
					delay_ms(200);
				}
				PORTG	=	0;
   1f7d0:	14 ba       	out	0x14, r1	; 20
   1f7d2:	6b c0       	rjmp	.+214    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
   1f7d4:	8f ef       	ldi	r24, 0xFF	; 255
   1f7d6:	80 93 01 01 	sts	0x0101, r24
   1f7da:	0f c0       	rjmp	.+30     	; 0x1f7fa <main+0xe08>
				while (!Serial_Available())
				{
					PORTH	^=	0xff;
   1f7dc:	80 91 02 01 	lds	r24, 0x0102
   1f7e0:	80 95       	com	r24
   1f7e2:	80 93 02 01 	sts	0x0102, r24
   1f7e6:	80 e0       	ldi	r24, 0x00	; 0
   1f7e8:	90 e0       	ldi	r25, 0x00	; 0
   1f7ea:	e0 ed       	ldi	r30, 0xD0	; 208
   1f7ec:	f7 e0       	ldi	r31, 0x07	; 7
   1f7ee:	31 97       	sbiw	r30, 0x01	; 1
   1f7f0:	f1 f7       	brne	.-4      	; 0x1f7ee <main+0xdfc>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f7f2:	01 96       	adiw	r24, 0x01	; 1
   1f7f4:	88 3c       	cpi	r24, 0xC8	; 200
   1f7f6:	91 05       	cpc	r25, r1
   1f7f8:	c1 f7       	brne	.-16     	; 0x1f7ea <main+0xdf8>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f7fa:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
				while (!Serial_Available())
   1f7fe:	87 ff       	sbrs	r24, 7
   1f800:	ed cf       	rjmp	.-38     	; 0x1f7dc <main+0xdea>
				{
					PORTH	^=	0xff;
					delay_ms(200);
				}
				PORTH	=	0;
   1f802:	10 92 02 01 	sts	0x0102, r1
   1f806:	51 c0       	rjmp	.+162    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
   1f808:	8f ef       	ldi	r24, 0xFF	; 255
   1f80a:	80 93 04 01 	sts	0x0104, r24
   1f80e:	0f c0       	rjmp	.+30     	; 0x1f82e <main+0xe3c>
				while (!Serial_Available())
				{
					PORTJ	^=	0xff;
   1f810:	80 91 05 01 	lds	r24, 0x0105
   1f814:	80 95       	com	r24
   1f816:	80 93 05 01 	sts	0x0105, r24
   1f81a:	80 e0       	ldi	r24, 0x00	; 0
   1f81c:	90 e0       	ldi	r25, 0x00	; 0
   1f81e:	e0 ed       	ldi	r30, 0xD0	; 208
   1f820:	f7 e0       	ldi	r31, 0x07	; 7
   1f822:	31 97       	sbiw	r30, 0x01	; 1
   1f824:	f1 f7       	brne	.-4      	; 0x1f822 <main+0xe30>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f826:	01 96       	adiw	r24, 0x01	; 1
   1f828:	88 3c       	cpi	r24, 0xC8	; 200
   1f82a:	91 05       	cpc	r25, r1
   1f82c:	c1 f7       	brne	.-16     	; 0x1f81e <main+0xe2c>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f82e:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
				while (!Serial_Available())
   1f832:	87 ff       	sbrs	r24, 7
   1f834:	ed cf       	rjmp	.-38     	; 0x1f810 <main+0xe1e>
				{
					PORTJ	^=	0xff;
					delay_ms(200);
				}
				PORTJ	=	0;
   1f836:	10 92 05 01 	sts	0x0105, r1
   1f83a:	37 c0       	rjmp	.+110    	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
   1f83c:	8f ef       	ldi	r24, 0xFF	; 255
   1f83e:	80 93 07 01 	sts	0x0107, r24
   1f842:	0f c0       	rjmp	.+30     	; 0x1f862 <main+0xe70>
				while (!Serial_Available())
				{
					PORTK	^=	0xff;
   1f844:	80 91 08 01 	lds	r24, 0x0108
   1f848:	80 95       	com	r24
   1f84a:	80 93 08 01 	sts	0x0108, r24
   1f84e:	80 e0       	ldi	r24, 0x00	; 0
   1f850:	90 e0       	ldi	r25, 0x00	; 0
   1f852:	e0 ed       	ldi	r30, 0xD0	; 208
   1f854:	f7 e0       	ldi	r31, 0x07	; 7
   1f856:	31 97       	sbiw	r30, 0x01	; 1
   1f858:	f1 f7       	brne	.-4      	; 0x1f856 <main+0xe64>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f85a:	01 96       	adiw	r24, 0x01	; 1
   1f85c:	88 3c       	cpi	r24, 0xC8	; 200
   1f85e:	91 05       	cpc	r25, r1
   1f860:	c1 f7       	brne	.-16     	; 0x1f852 <main+0xe60>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f862:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
				while (!Serial_Available())
   1f866:	87 ff       	sbrs	r24, 7
   1f868:	ed cf       	rjmp	.-38     	; 0x1f844 <main+0xe52>
				{
					PORTK	^=	0xff;
					delay_ms(200);
				}
				PORTK	=	0;
   1f86a:	10 92 08 01 	sts	0x0108, r1
   1f86e:	1d c0       	rjmp	.+58     	; 0x1f8aa <main+0xeb8>
				break;
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
   1f870:	8f ef       	ldi	r24, 0xFF	; 255
   1f872:	80 93 0a 01 	sts	0x010A, r24
   1f876:	0f c0       	rjmp	.+30     	; 0x1f896 <main+0xea4>
				while (!Serial_Available())
				{
					PORTL	^=	0xff;
   1f878:	80 91 0b 01 	lds	r24, 0x010B
   1f87c:	80 95       	com	r24
   1f87e:	80 93 0b 01 	sts	0x010B, r24
   1f882:	80 e0       	ldi	r24, 0x00	; 0
   1f884:	90 e0       	ldi	r25, 0x00	; 0
   1f886:	e0 ed       	ldi	r30, 0xD0	; 208
   1f888:	f7 e0       	ldi	r31, 0x07	; 7
   1f88a:	31 97       	sbiw	r30, 0x01	; 1
   1f88c:	f1 f7       	brne	.-4      	; 0x1f88a <main+0xe98>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1f88e:	01 96       	adiw	r24, 0x01	; 1
   1f890:	88 3c       	cpi	r24, 0xC8	; 200
   1f892:	91 05       	cpc	r25, r1
   1f894:	c1 f7       	brne	.-16     	; 0x1f886 <main+0xe94>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   1f896:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
				while (!Serial_Available())
   1f89a:	87 ff       	sbrs	r24, 7
   1f89c:	ed cf       	rjmp	.-38     	; 0x1f878 <main+0xe86>
				{
					PORTL	^=	0xff;
					delay_ms(200);
				}
				PORTL	=	0;
   1f89e:	10 92 0b 01 	sts	0x010B, r1
   1f8a2:	03 c0       	rjmp	.+6      	; 0x1f8aa <main+0xeb8>
				break;
		#endif

			default:
				PrintFromPROGMEMln(gTextMsg_PortNotSupported, 0);
   1f8a4:	8f e2       	ldi	r24, 0x2F	; 47
   1f8a6:	92 ee       	ldi	r25, 0xE2	; 226
   1f8a8:	b9 c9       	rjmp	.-3214   	; 0x1ec1c <main+0x22a>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   1f8aa:	80 91 c0 00 	lds	r24, 0x00C0
   1f8ae:	87 ff       	sbrs	r24, 7
   1f8b0:	fc cf       	rjmp	.-8      	; 0x1f8aa <main+0xeb8>
	{
		// wait for data
	}
	return UART_DATA_REG;
   1f8b2:	80 91 c6 00 	lds	r24, 0x00C6
   1f8b6:	b5 c9       	rjmp	.-3222   	; 0x1ec22 <main+0x230>
			recchar();
		}
	}
	else
	{
		PrintFromPROGMEMln(gTextMsg_MustBeLetter, 0);
   1f8b8:	82 e4       	ldi	r24, 0x42	; 66
   1f8ba:	92 ee       	ldi	r25, 0xE2	; 226
   1f8bc:	af c9       	rjmp	.-3234   	; 0x1ec1c <main+0x22a>
				//*	do nothing
				break;
	 	#endif
	 	
			default:
				PrintFromPROGMEMln(gTextMsg_HUH, 0);
   1f8be:	8c e1       	ldi	r24, 0x1C	; 28
   1f8c0:	91 ee       	ldi	r25, 0xE1	; 225
   1f8c2:	ac c9       	rjmp	.-3240   	; 0x1ec1c <main+0x22a>
   1f8c4:	aa 24       	eor	r10, r10
   1f8c6:	bb 24       	eor	r11, r11
				{
					exPointCntr	=	0;
				}
			#endif

				switch (msgParseState)
   1f8c8:	93 30       	cpi	r25, 0x03	; 3
   1f8ca:	61 f1       	breq	.+88     	; 0x1f924 <main+0xf32>
   1f8cc:	94 30       	cpi	r25, 0x04	; 4
   1f8ce:	28 f4       	brcc	.+10     	; 0x1f8da <main+0xee8>
   1f8d0:	91 30       	cpi	r25, 0x01	; 1
   1f8d2:	89 f0       	breq	.+34     	; 0x1f8f6 <main+0xf04>
   1f8d4:	92 30       	cpi	r25, 0x02	; 2
   1f8d6:	08 f5       	brcc	.+66     	; 0x1f91a <main+0xf28>
   1f8d8:	08 c0       	rjmp	.+16     	; 0x1f8ea <main+0xef8>
   1f8da:	95 30       	cpi	r25, 0x05	; 5
   1f8dc:	b1 f1       	breq	.+108    	; 0x1f94a <main+0xf58>
   1f8de:	95 30       	cpi	r25, 0x05	; 5
   1f8e0:	40 f1       	brcs	.+80     	; 0x1f932 <main+0xf40>
   1f8e2:	96 30       	cpi	r25, 0x06	; 6
   1f8e4:	09 f0       	breq	.+2      	; 0x1f8e8 <main+0xef6>
   1f8e6:	53 c0       	rjmp	.+166    	; 0x1f98e <main+0xf9c>
   1f8e8:	4e c0       	rjmp	.+156    	; 0x1f986 <main+0xf94>
				{
					case ST_START:
						if ( c == MESSAGE_START )
   1f8ea:	2b 31       	cpi	r18, 0x1B	; 27
   1f8ec:	09 f0       	breq	.+2      	; 0x1f8f0 <main+0xefe>
   1f8ee:	20 c9       	rjmp	.-3520   	; 0x1eb30 <main+0x13e>
   1f8f0:	91 e0       	ldi	r25, 0x01	; 1
   1f8f2:	6b e1       	ldi	r22, 0x1B	; 27
   1f8f4:	1d c9       	rjmp	.-3526   	; 0x1eb30 <main+0x13e>
							checksum		=	MESSAGE_START^0;
						}
						break;

					case ST_GET_SEQ_NUM:
						if ( (c == 1) || (c == seqNum) )
   1f8f6:	21 30       	cpi	r18, 0x01	; 1
   1f8f8:	41 f0       	breq	.+16     	; 0x1f90a <main+0xf18>
   1f8fa:	c1 5d       	subi	r28, 0xD1	; 209
   1f8fc:	de 4f       	sbci	r29, 0xFE	; 254
   1f8fe:	58 81       	ld	r21, Y
   1f900:	cf 52       	subi	r28, 0x2F	; 47
   1f902:	d1 40       	sbci	r29, 0x01	; 1
   1f904:	25 17       	cp	r18, r21
   1f906:	09 f0       	breq	.+2      	; 0x1f90a <main+0xf18>
   1f908:	02 c3       	rjmp	.+1540   	; 0x1ff0e <main+0x151c>
						{
							seqNum			=	c;
							msgParseState	=	ST_MSG_SIZE_1;
							checksum		^=	c;
   1f90a:	62 27       	eor	r22, r18
   1f90c:	c1 5d       	subi	r28, 0xD1	; 209
   1f90e:	de 4f       	sbci	r29, 0xFE	; 254
   1f910:	28 83       	st	Y, r18
   1f912:	cf 52       	subi	r28, 0x2F	; 47
   1f914:	d1 40       	sbci	r29, 0x01	; 1
   1f916:	92 e0       	ldi	r25, 0x02	; 2
   1f918:	0b c9       	rjmp	.-3562   	; 0x1eb30 <main+0x13e>
							msgParseState	=	ST_START;
						}
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
   1f91a:	b2 2f       	mov	r27, r18
   1f91c:	a0 e0       	ldi	r26, 0x00	; 0
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
   1f91e:	62 27       	eor	r22, r18
   1f920:	93 e0       	ldi	r25, 0x03	; 3
   1f922:	06 c9       	rjmp	.-3572   	; 0x1eb30 <main+0x13e>
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
   1f924:	82 2f       	mov	r24, r18
   1f926:	90 e0       	ldi	r25, 0x00	; 0
   1f928:	a8 2b       	or	r26, r24
   1f92a:	b9 2b       	or	r27, r25
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
   1f92c:	62 27       	eor	r22, r18
   1f92e:	94 e0       	ldi	r25, 0x04	; 4
   1f930:	ff c8       	rjmp	.-3586   	; 0x1eb30 <main+0x13e>
						break;

					case ST_GET_TOKEN:
						if ( c == TOKEN )
   1f932:	2e 30       	cpi	r18, 0x0E	; 14
   1f934:	09 f0       	breq	.+2      	; 0x1f938 <main+0xf46>
   1f936:	eb c2       	rjmp	.+1494   	; 0x1ff0e <main+0x151c>
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
   1f938:	62 27       	eor	r22, r18
   1f93a:	95 e0       	ldi	r25, 0x05	; 5
   1f93c:	c0 5d       	subi	r28, 0xD0	; 208
   1f93e:	de 4f       	sbci	r29, 0xFE	; 254
   1f940:	19 82       	std	Y+1, r1	; 0x01
   1f942:	18 82       	st	Y, r1
   1f944:	c0 53       	subi	r28, 0x30	; 48
   1f946:	d1 40       	sbci	r29, 0x01	; 1
   1f948:	f3 c8       	rjmp	.-3610   	; 0x1eb30 <main+0x13e>
							msgParseState	=	ST_START;
						}
						break;

					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
   1f94a:	e1 e0       	ldi	r30, 0x01	; 1
   1f94c:	f0 e0       	ldi	r31, 0x00	; 0
   1f94e:	ec 0f       	add	r30, r28
   1f950:	fd 1f       	adc	r31, r29
   1f952:	c0 5d       	subi	r28, 0xD0	; 208
   1f954:	de 4f       	sbci	r29, 0xFE	; 254
   1f956:	e8 80       	ld	r14, Y
   1f958:	f9 80       	ldd	r15, Y+1	; 0x01
   1f95a:	c0 53       	subi	r28, 0x30	; 48
   1f95c:	d1 40       	sbci	r29, 0x01	; 1
   1f95e:	ee 0d       	add	r30, r14
   1f960:	ff 1d       	adc	r31, r15
   1f962:	20 83       	st	Z, r18
   1f964:	87 01       	movw	r16, r14
   1f966:	0f 5f       	subi	r16, 0xFF	; 255
   1f968:	1f 4f       	sbci	r17, 0xFF	; 255
   1f96a:	c0 5d       	subi	r28, 0xD0	; 208
   1f96c:	de 4f       	sbci	r29, 0xFE	; 254
   1f96e:	19 83       	std	Y+1, r17	; 0x01
   1f970:	08 83       	st	Y, r16
   1f972:	c0 53       	subi	r28, 0x30	; 48
   1f974:	d1 40       	sbci	r29, 0x01	; 1
						checksum		^=	c;
   1f976:	62 27       	eor	r22, r18
						if (ii == msgLength )
   1f978:	0a 17       	cp	r16, r26
   1f97a:	1b 07       	cpc	r17, r27
   1f97c:	09 f0       	breq	.+2      	; 0x1f980 <main+0xf8e>
   1f97e:	d8 c8       	rjmp	.-3664   	; 0x1eb30 <main+0x13e>
   1f980:	d8 01       	movw	r26, r16
   1f982:	96 e0       	ldi	r25, 0x06	; 6
   1f984:	d5 c8       	rjmp	.-3670   	; 0x1eb30 <main+0x13e>
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   1f986:	26 17       	cp	r18, r22
   1f988:	09 f0       	breq	.+2      	; 0x1f98c <main+0xf9a>
   1f98a:	c1 c2       	rjmp	.+1410   	; 0x1ff0e <main+0x151c>
   1f98c:	03 c0       	rjmp	.+6      	; 0x1f994 <main+0xfa2>
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   1f98e:	97 30       	cpi	r25, 0x07	; 7
   1f990:	09 f0       	breq	.+2      	; 0x1f994 <main+0xfa2>
   1f992:	ce c8       	rjmp	.-3684   	; 0x1eb30 <main+0x13e>
   1f994:	99 24       	eor	r9, r9

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   1f996:	89 81       	ldd	r24, Y+1	; 0x01
   1f998:	83 31       	cpi	r24, 0x13	; 19
   1f99a:	09 f4       	brne	.+2      	; 0x1f99e <main+0xfac>
   1f99c:	fc c0       	rjmp	.+504    	; 0x1fb96 <main+0x11a4>
   1f99e:	84 31       	cpi	r24, 0x14	; 20
   1f9a0:	c8 f4       	brcc	.+50     	; 0x1f9d4 <main+0xfe2>
   1f9a2:	86 30       	cpi	r24, 0x06	; 6
   1f9a4:	09 f4       	brne	.+2      	; 0x1f9a8 <main+0xfb6>
   1f9a6:	c2 c0       	rjmp	.+388    	; 0x1fb2c <main+0x113a>
   1f9a8:	87 30       	cpi	r24, 0x07	; 7
   1f9aa:	50 f4       	brcc	.+20     	; 0x1f9c0 <main+0xfce>
   1f9ac:	82 30       	cpi	r24, 0x02	; 2
   1f9ae:	09 f4       	brne	.+2      	; 0x1f9b2 <main+0xfc0>
   1f9b0:	f0 c0       	rjmp	.+480    	; 0x1fb92 <main+0x11a0>
   1f9b2:	83 30       	cpi	r24, 0x03	; 3
   1f9b4:	09 f4       	brne	.+2      	; 0x1f9b8 <main+0xfc6>
   1f9b6:	58 c0       	rjmp	.+176    	; 0x1fa68 <main+0x1076>
   1f9b8:	81 30       	cpi	r24, 0x01	; 1
   1f9ba:	09 f0       	breq	.+2      	; 0x1f9be <main+0xfcc>
   1f9bc:	0a c2       	rjmp	.+1044   	; 0x1fdd2 <main+0x13e0>
   1f9be:	3e c0       	rjmp	.+124    	; 0x1fa3c <main+0x104a>
   1f9c0:	81 31       	cpi	r24, 0x11	; 17
   1f9c2:	09 f4       	brne	.+2      	; 0x1f9c6 <main+0xfd4>
   1f9c4:	62 c0       	rjmp	.+196    	; 0x1fa8a <main+0x1098>
   1f9c6:	82 31       	cpi	r24, 0x12	; 18
   1f9c8:	08 f0       	brcs	.+2      	; 0x1f9cc <main+0xfda>
   1f9ca:	a6 c0       	rjmp	.+332    	; 0x1fb18 <main+0x1126>
   1f9cc:	80 31       	cpi	r24, 0x10	; 16
   1f9ce:	09 f0       	breq	.+2      	; 0x1f9d2 <main+0xfe0>
   1f9d0:	00 c2       	rjmp	.+1024   	; 0x1fdd2 <main+0x13e0>
   1f9d2:	df c0       	rjmp	.+446    	; 0x1fb92 <main+0x11a0>
   1f9d4:	88 31       	cpi	r24, 0x18	; 24
   1f9d6:	09 f4       	brne	.+2      	; 0x1f9da <main+0xfe8>
   1f9d8:	72 c0       	rjmp	.+228    	; 0x1fabe <main+0x10cc>
   1f9da:	89 31       	cpi	r24, 0x19	; 25
   1f9dc:	50 f4       	brcc	.+20     	; 0x1f9f2 <main+0x1000>
   1f9de:	85 31       	cpi	r24, 0x15	; 21
   1f9e0:	09 f4       	brne	.+2      	; 0x1f9e4 <main+0xff2>
   1f9e2:	d9 c0       	rjmp	.+434    	; 0x1fb96 <main+0x11a4>
   1f9e4:	85 31       	cpi	r24, 0x15	; 21
   1f9e6:	08 f4       	brcc	.+2      	; 0x1f9ea <main+0xff8>
   1f9e8:	77 c1       	rjmp	.+750    	; 0x1fcd8 <main+0x12e6>
   1f9ea:	86 31       	cpi	r24, 0x16	; 22
   1f9ec:	09 f0       	breq	.+2      	; 0x1f9f0 <main+0xffe>
   1f9ee:	f1 c1       	rjmp	.+994    	; 0x1fdd2 <main+0x13e0>
   1f9f0:	73 c1       	rjmp	.+742    	; 0x1fcd8 <main+0x12e6>
   1f9f2:	8a 31       	cpi	r24, 0x1A	; 26
   1f9f4:	09 f4       	brne	.+2      	; 0x1f9f8 <main+0x1006>
   1f9f6:	57 c0       	rjmp	.+174    	; 0x1faa6 <main+0x10b4>
   1f9f8:	8a 31       	cpi	r24, 0x1A	; 26
   1f9fa:	08 f4       	brcc	.+2      	; 0x1f9fe <main+0x100c>
   1f9fc:	7c c0       	rjmp	.+248    	; 0x1faf6 <main+0x1104>
   1f9fe:	8b 31       	cpi	r24, 0x1B	; 27
   1fa00:	09 f4       	brne	.+2      	; 0x1fa04 <main+0x1012>
   1fa02:	46 c0       	rjmp	.+140    	; 0x1fa90 <main+0x109e>
   1fa04:	8d 31       	cpi	r24, 0x1D	; 29
   1fa06:	09 f0       	breq	.+2      	; 0x1fa0a <main+0x1018>
   1fa08:	e4 c1       	rjmp	.+968    	; 0x1fdd2 <main+0x13e0>
				case CMD_SPI_MULTI:
					{
						unsigned char answerByte;
						unsigned char flag=0;

						if ( msgBuffer[4]== 0x30 )
   1fa0a:	8d 81       	ldd	r24, Y+5	; 0x05
   1fa0c:	80 33       	cpi	r24, 0x30	; 48
   1fa0e:	11 f0       	breq	.+4      	; 0x1fa14 <main+0x1022>
   1fa10:	90 e0       	ldi	r25, 0x00	; 0
   1fa12:	0a c0       	rjmp	.+20     	; 0x1fa28 <main+0x1036>
						{
							unsigned char signatureIndex	=	msgBuffer[6];
   1fa14:	8f 81       	ldd	r24, Y+7	; 0x07

							if ( signatureIndex == 0 )
   1fa16:	88 23       	and	r24, r24
   1fa18:	11 f4       	brne	.+4      	; 0x1fa1e <main+0x102c>
   1fa1a:	9e e1       	ldi	r25, 0x1E	; 30
   1fa1c:	05 c0       	rjmp	.+10     	; 0x1fa28 <main+0x1036>
								answerByte	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
							else if ( signatureIndex == 1 )
   1fa1e:	81 30       	cpi	r24, 0x01	; 1
   1fa20:	11 f0       	breq	.+4      	; 0x1fa26 <main+0x1034>
   1fa22:	93 e0       	ldi	r25, 0x03	; 3
   1fa24:	01 c0       	rjmp	.+2      	; 0x1fa28 <main+0x1036>
   1fa26:	97 e9       	ldi	r25, 0x97	; 151
	//						flag	=	1; // Remark this line for AVRDUDE <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
							msgBuffer[1]	=	STATUS_CMD_OK;
   1fa28:	1a 82       	std	Y+2, r1	; 0x02
							msgBuffer[2]	=	0;
   1fa2a:	1b 82       	std	Y+3, r1	; 0x03
							msgBuffer[3]	=	msgBuffer[4];
   1fa2c:	8d 81       	ldd	r24, Y+5	; 0x05
   1fa2e:	8c 83       	std	Y+4, r24	; 0x04
							msgBuffer[4]	=	0;
   1fa30:	1d 82       	std	Y+5, r1	; 0x05
							msgBuffer[5]	=	answerByte;
   1fa32:	9e 83       	std	Y+6, r25	; 0x06
							msgBuffer[6]	=	STATUS_CMD_OK;
   1fa34:	1f 82       	std	Y+7, r1	; 0x07
   1fa36:	27 e0       	ldi	r18, 0x07	; 7
   1fa38:	30 e0       	ldi	r19, 0x00	; 0
   1fa3a:	cf c1       	rjmp	.+926    	; 0x1fdda <main+0x13e8>
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   1fa3c:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] 	=	8;
   1fa3e:	88 e0       	ldi	r24, 0x08	; 8
   1fa40:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3] 	=	'A';
   1fa42:	81 e4       	ldi	r24, 0x41	; 65
   1fa44:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4] 	=	'V';
   1fa46:	86 e5       	ldi	r24, 0x56	; 86
   1fa48:	8d 83       	std	Y+5, r24	; 0x05
					msgBuffer[5] 	=	'R';
   1fa4a:	82 e5       	ldi	r24, 0x52	; 82
   1fa4c:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[6] 	=	'I';
   1fa4e:	89 e4       	ldi	r24, 0x49	; 73
   1fa50:	8f 83       	std	Y+7, r24	; 0x07
					msgBuffer[7] 	=	'S';
   1fa52:	83 e5       	ldi	r24, 0x53	; 83
   1fa54:	88 87       	std	Y+8, r24	; 0x08
					msgBuffer[8] 	=	'P';
   1fa56:	80 e5       	ldi	r24, 0x50	; 80
   1fa58:	89 87       	std	Y+9, r24	; 0x09
					msgBuffer[9] 	=	'_';
   1fa5a:	8f e5       	ldi	r24, 0x5F	; 95
   1fa5c:	8a 87       	std	Y+10, r24	; 0x0a
					msgBuffer[10]	=	'2';
   1fa5e:	82 e3       	ldi	r24, 0x32	; 50
   1fa60:	8b 87       	std	Y+11, r24	; 0x0b
   1fa62:	2b e0       	ldi	r18, 0x0B	; 11
   1fa64:	30 e0       	ldi	r19, 0x00	; 0
   1fa66:	b9 c1       	rjmp	.+882    	; 0x1fdda <main+0x13e8>

				case CMD_GET_PARAMETER:
					{
						unsigned char value;

						switch(msgBuffer[1])
   1fa68:	8a 81       	ldd	r24, Y+2	; 0x02
   1fa6a:	81 39       	cpi	r24, 0x91	; 145
   1fa6c:	41 f0       	breq	.+16     	; 0x1fa7e <main+0x108c>
   1fa6e:	82 39       	cpi	r24, 0x92	; 146
   1fa70:	41 f0       	breq	.+16     	; 0x1fa82 <main+0x1090>
   1fa72:	80 39       	cpi	r24, 0x90	; 144
   1fa74:	11 f4       	brne	.+4      	; 0x1fa7a <main+0x1088>
   1fa76:	8f e0       	ldi	r24, 0x0F	; 15
   1fa78:	05 c0       	rjmp	.+10     	; 0x1fa84 <main+0x1092>
   1fa7a:	80 e0       	ldi	r24, 0x00	; 0
   1fa7c:	03 c0       	rjmp	.+6      	; 0x1fa84 <main+0x1092>
   1fa7e:	82 e0       	ldi	r24, 0x02	; 2
   1fa80:	01 c0       	rjmp	.+2      	; 0x1fa84 <main+0x1092>
						case PARAM_HW_VER:
							value	=	CONFIG_PARAM_HW_VER;
							break;
						case PARAM_SW_MAJOR:
							value	=	CONFIG_PARAM_SW_MAJOR;
							break;
   1fa82:	8a e0       	ldi	r24, 0x0A	; 10
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   1fa84:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	value;
   1fa86:	8b 83       	std	Y+3, r24	; 0x03
   1fa88:	44 c0       	rjmp	.+136    	; 0x1fb12 <main+0x1120>
					}
					break;
   1fa8a:	99 24       	eor	r9, r9
   1fa8c:	93 94       	inc	r9
   1fa8e:	81 c0       	rjmp	.+258    	; 0x1fb92 <main+0x11a0>
					msgBuffer[1]	=	STATUS_CMD_OK;
					break;

				case CMD_READ_SIGNATURE_ISP:
					{
						unsigned char signatureIndex	=	msgBuffer[4];
   1fa90:	8d 81       	ldd	r24, Y+5	; 0x05
						unsigned char signature;

						if ( signatureIndex == 0 )
   1fa92:	88 23       	and	r24, r24
   1fa94:	11 f4       	brne	.+4      	; 0x1fa9a <main+0x10a8>
   1fa96:	8e e1       	ldi	r24, 0x1E	; 30
   1fa98:	2c c0       	rjmp	.+88     	; 0x1faf2 <main+0x1100>
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
   1fa9a:	81 30       	cpi	r24, 0x01	; 1
   1fa9c:	11 f0       	breq	.+4      	; 0x1faa2 <main+0x10b0>
   1fa9e:	83 e0       	ldi	r24, 0x03	; 3
   1faa0:	28 c0       	rjmp	.+80     	; 0x1faf2 <main+0x1100>
   1faa2:	87 e9       	ldi	r24, 0x97	; 151
   1faa4:	26 c0       	rjmp	.+76     	; 0x1faf2 <main+0x1100>
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
					msgBuffer[1]	=	STATUS_CMD_OK;
   1faa6:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   1faa8:	e1 e0       	ldi	r30, 0x01	; 1
   1faaa:	f0 e0       	ldi	r31, 0x00	; 0
   1faac:	89 e0       	ldi	r24, 0x09	; 9
   1faae:	80 93 57 00 	sts	0x0057, r24
   1fab2:	84 91       	lpm	r24, Z+
   1fab4:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3]	=	STATUS_CMD_OK;
   1fab6:	1c 82       	std	Y+4, r1	; 0x04
   1fab8:	24 e0       	ldi	r18, 0x04	; 4
   1faba:	30 e0       	ldi	r19, 0x00	; 0
   1fabc:	8e c1       	rjmp	.+796    	; 0x1fdda <main+0x13e8>

				case CMD_READ_FUSE_ISP:
					{
						unsigned char fuseBits;

						if ( msgBuffer[2] == 0x50 )
   1fabe:	8b 81       	ldd	r24, Y+3	; 0x03
   1fac0:	80 35       	cpi	r24, 0x50	; 80
   1fac2:	89 f4       	brne	.+34     	; 0x1fae6 <main+0x10f4>
						{
							if ( msgBuffer[3] == 0x08 )
   1fac4:	8c 81       	ldd	r24, Y+4	; 0x04
   1fac6:	88 30       	cpi	r24, 0x08	; 8
   1fac8:	39 f4       	brne	.+14     	; 0x1fad8 <main+0x10e6>
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   1faca:	e2 e0       	ldi	r30, 0x02	; 2
   1facc:	f0 e0       	ldi	r31, 0x00	; 0
   1face:	89 e0       	ldi	r24, 0x09	; 9
   1fad0:	80 93 57 00 	sts	0x0057, r24
   1fad4:	84 91       	lpm	r24, Z+
   1fad6:	0d c0       	rjmp	.+26     	; 0x1faf2 <main+0x1100>
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   1fad8:	e0 e0       	ldi	r30, 0x00	; 0
   1fada:	f0 e0       	ldi	r31, 0x00	; 0
   1fadc:	89 e0       	ldi	r24, 0x09	; 9
   1fade:	80 93 57 00 	sts	0x0057, r24
   1fae2:	84 91       	lpm	r24, Z+
   1fae4:	06 c0       	rjmp	.+12     	; 0x1faf2 <main+0x1100>
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   1fae6:	e3 e0       	ldi	r30, 0x03	; 3
   1fae8:	f0 e0       	ldi	r31, 0x00	; 0
   1faea:	89 e0       	ldi	r24, 0x09	; 9
   1faec:	80 93 57 00 	sts	0x0057, r24
   1faf0:	84 91       	lpm	r24, Z+
						}
						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   1faf2:	1a 82       	std	Y+2, r1	; 0x02
   1faf4:	df cf       	rjmp	.-66     	; 0x1fab4 <main+0x10c2>
	#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
				case CMD_PROGRAM_LOCK_ISP:
					{
						unsigned char lockBits	=	msgBuffer[4];

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   1faf6:	8d 81       	ldd	r24, Y+5	; 0x05
						boot_lock_bits_set(lockBits);		// and program it
   1faf8:	83 6c       	ori	r24, 0xC3	; 195
   1fafa:	99 e0       	ldi	r25, 0x09	; 9
   1fafc:	e1 e0       	ldi	r30, 0x01	; 1
   1fafe:	f0 e0       	ldi	r31, 0x00	; 0
   1fb00:	08 2e       	mov	r0, r24
   1fb02:	90 93 57 00 	sts	0x0057, r25
   1fb06:	e8 95       	spm
						boot_spm_busy_wait();
   1fb08:	07 b6       	in	r0, 0x37	; 55
   1fb0a:	00 fc       	sbrc	r0, 0
   1fb0c:	fd cf       	rjmp	.-6      	; 0x1fb08 <main+0x1116>

						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   1fb0e:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	STATUS_CMD_OK;
   1fb10:	1b 82       	std	Y+3, r1	; 0x03
   1fb12:	23 e0       	ldi	r18, 0x03	; 3
   1fb14:	30 e0       	ldi	r19, 0x00	; 0
   1fb16:	61 c1       	rjmp	.+706    	; 0x1fdda <main+0x13e8>
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   1fb18:	1a 82       	std	Y+2, r1	; 0x02
   1fb1a:	ce 5c       	subi	r28, 0xCE	; 206
   1fb1c:	de 4f       	sbci	r29, 0xFE	; 254
   1fb1e:	18 82       	st	Y, r1
   1fb20:	19 82       	std	Y+1, r1	; 0x01
   1fb22:	1a 82       	std	Y+2, r1	; 0x02
   1fb24:	1b 82       	std	Y+3, r1	; 0x03
   1fb26:	c2 53       	subi	r28, 0x32	; 50
   1fb28:	d1 40       	sbci	r29, 0x01	; 1
   1fb2a:	55 c1       	rjmp	.+682    	; 0x1fdd6 <main+0x13e4>
					break;

				case CMD_LOAD_ADDRESS:
	#if defined(RAMPZ)
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   1fb2c:	8a 81       	ldd	r24, Y+2	; 0x02
   1fb2e:	90 e0       	ldi	r25, 0x00	; 0
   1fb30:	a0 e0       	ldi	r26, 0x00	; 0
   1fb32:	b0 e0       	ldi	r27, 0x00	; 0
   1fb34:	58 2f       	mov	r21, r24
   1fb36:	44 27       	eor	r20, r20
   1fb38:	33 27       	eor	r19, r19
   1fb3a:	22 27       	eor	r18, r18
   1fb3c:	8b 81       	ldd	r24, Y+3	; 0x03
   1fb3e:	90 e0       	ldi	r25, 0x00	; 0
   1fb40:	a0 e0       	ldi	r26, 0x00	; 0
   1fb42:	b0 e0       	ldi	r27, 0x00	; 0
   1fb44:	dc 01       	movw	r26, r24
   1fb46:	99 27       	eor	r25, r25
   1fb48:	88 27       	eor	r24, r24
   1fb4a:	28 2b       	or	r18, r24
   1fb4c:	39 2b       	or	r19, r25
   1fb4e:	4a 2b       	or	r20, r26
   1fb50:	5b 2b       	or	r21, r27
   1fb52:	8d 81       	ldd	r24, Y+5	; 0x05
   1fb54:	90 e0       	ldi	r25, 0x00	; 0
   1fb56:	a0 e0       	ldi	r26, 0x00	; 0
   1fb58:	b0 e0       	ldi	r27, 0x00	; 0
   1fb5a:	28 2b       	or	r18, r24
   1fb5c:	39 2b       	or	r19, r25
   1fb5e:	4a 2b       	or	r20, r26
   1fb60:	5b 2b       	or	r21, r27
   1fb62:	8c 81       	ldd	r24, Y+4	; 0x04
   1fb64:	90 e0       	ldi	r25, 0x00	; 0
   1fb66:	a0 e0       	ldi	r26, 0x00	; 0
   1fb68:	b0 e0       	ldi	r27, 0x00	; 0
   1fb6a:	ba 2f       	mov	r27, r26
   1fb6c:	a9 2f       	mov	r26, r25
   1fb6e:	98 2f       	mov	r25, r24
   1fb70:	88 27       	eor	r24, r24
   1fb72:	28 2b       	or	r18, r24
   1fb74:	39 2b       	or	r19, r25
   1fb76:	4a 2b       	or	r20, r26
   1fb78:	5b 2b       	or	r21, r27
   1fb7a:	22 0f       	add	r18, r18
   1fb7c:	33 1f       	adc	r19, r19
   1fb7e:	44 1f       	adc	r20, r20
   1fb80:	55 1f       	adc	r21, r21
   1fb82:	c0 5e       	subi	r28, 0xE0	; 224
   1fb84:	de 4f       	sbci	r29, 0xFE	; 254
   1fb86:	28 83       	st	Y, r18
   1fb88:	39 83       	std	Y+1, r19	; 0x01
   1fb8a:	4a 83       	std	Y+2, r20	; 0x02
   1fb8c:	5b 83       	std	Y+3, r21	; 0x03
   1fb8e:	c0 52       	subi	r28, 0x20	; 32
   1fb90:	d1 40       	sbci	r29, 0x01	; 1
	#else
					address	=	( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;		//convert word to byte address
	#endif
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   1fb92:	1a 82       	std	Y+2, r1	; 0x02
   1fb94:	20 c1       	rjmp	.+576    	; 0x1fdd6 <main+0x13e4>
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   1fb96:	9a 81       	ldd	r25, Y+2	; 0x02
   1fb98:	2b 81       	ldd	r18, Y+3	; 0x03
						unsigned int	data;
						unsigned char	highByte, lowByte;
						address_t		tempaddress	=	address;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   1fb9a:	83 31       	cpi	r24, 0x13	; 19
   1fb9c:	49 f0       	breq	.+18     	; 0x1fbb0 <main+0x11be>
   1fb9e:	c0 5e       	subi	r28, 0xE0	; 224
   1fba0:	de 4f       	sbci	r29, 0xFE	; 254
   1fba2:	48 81       	ld	r20, Y
   1fba4:	59 81       	ldd	r21, Y+1	; 0x01
   1fba6:	6a 81       	ldd	r22, Y+2	; 0x02
   1fba8:	7b 81       	ldd	r23, Y+3	; 0x03
   1fbaa:	c0 52       	subi	r28, 0x20	; 32
   1fbac:	d1 40       	sbci	r29, 0x01	; 1
   1fbae:	8a c0       	rjmp	.+276    	; 0x1fcc4 <main+0x12d2>
						{
							// erase only main section (bootloader protection)
							if (eraseAddress < APP_END )
   1fbb0:	ce 5c       	subi	r28, 0xCE	; 206
   1fbb2:	de 4f       	sbci	r29, 0xFE	; 254
   1fbb4:	48 81       	ld	r20, Y
   1fbb6:	59 81       	ldd	r21, Y+1	; 0x01
   1fbb8:	6a 81       	ldd	r22, Y+2	; 0x02
   1fbba:	7b 81       	ldd	r23, Y+3	; 0x03
   1fbbc:	c2 53       	subi	r28, 0x32	; 50
   1fbbe:	d1 40       	sbci	r29, 0x01	; 1
   1fbc0:	40 30       	cpi	r20, 0x00	; 0
   1fbc2:	80 ec       	ldi	r24, 0xC0	; 192
   1fbc4:	58 07       	cpc	r21, r24
   1fbc6:	81 e0       	ldi	r24, 0x01	; 1
   1fbc8:	68 07       	cpc	r22, r24
   1fbca:	80 e0       	ldi	r24, 0x00	; 0
   1fbcc:	78 07       	cpc	r23, r24
   1fbce:	f0 f4       	brcc	.+60     	; 0x1fc0c <main+0x121a>
							{
								boot_page_erase(eraseAddress);	// Perform page erase
   1fbd0:	83 e0       	ldi	r24, 0x03	; 3
   1fbd2:	fa 01       	movw	r30, r20
   1fbd4:	60 93 5b 00 	sts	0x005B, r22
   1fbd8:	80 93 57 00 	sts	0x0057, r24
   1fbdc:	e8 95       	spm
								boot_spm_busy_wait();		// Wait until the memory is erased.
   1fbde:	07 b6       	in	r0, 0x37	; 55
   1fbe0:	00 fc       	sbrc	r0, 0
   1fbe2:	fd cf       	rjmp	.-6      	; 0x1fbde <main+0x11ec>
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   1fbe4:	ce 5c       	subi	r28, 0xCE	; 206
   1fbe6:	de 4f       	sbci	r29, 0xFE	; 254
   1fbe8:	48 81       	ld	r20, Y
   1fbea:	59 81       	ldd	r21, Y+1	; 0x01
   1fbec:	6a 81       	ldd	r22, Y+2	; 0x02
   1fbee:	7b 81       	ldd	r23, Y+3	; 0x03
   1fbf0:	c2 53       	subi	r28, 0x32	; 50
   1fbf2:	d1 40       	sbci	r29, 0x01	; 1
   1fbf4:	40 50       	subi	r20, 0x00	; 0
   1fbf6:	5f 4f       	sbci	r21, 0xFF	; 255
   1fbf8:	6f 4f       	sbci	r22, 0xFF	; 255
   1fbfa:	7f 4f       	sbci	r23, 0xFF	; 255
   1fbfc:	ce 5c       	subi	r28, 0xCE	; 206
   1fbfe:	de 4f       	sbci	r29, 0xFE	; 254
   1fc00:	48 83       	st	Y, r20
   1fc02:	59 83       	std	Y+1, r21	; 0x01
   1fc04:	6a 83       	std	Y+2, r22	; 0x02
   1fc06:	7b 83       	std	Y+3, r23	; 0x03
   1fc08:	c2 53       	subi	r28, 0x32	; 50
   1fc0a:	d1 40       	sbci	r29, 0x01	; 1
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   1fc0c:	c9 5c       	subi	r28, 0xC9	; 201
   1fc0e:	de 4f       	sbci	r29, 0xFE	; 254
   1fc10:	98 83       	st	Y, r25
   1fc12:	c7 53       	subi	r28, 0x37	; 55
   1fc14:	d1 40       	sbci	r29, 0x01	; 1
   1fc16:	ca 5c       	subi	r28, 0xCA	; 202
   1fc18:	de 4f       	sbci	r29, 0xFE	; 254
   1fc1a:	18 82       	st	Y, r1
   1fc1c:	c6 53       	subi	r28, 0x36	; 54
   1fc1e:	d1 40       	sbci	r29, 0x01	; 1
   1fc20:	02 2f       	mov	r16, r18
   1fc22:	10 e0       	ldi	r17, 0x00	; 0
   1fc24:	ca 5c       	subi	r28, 0xCA	; 202
   1fc26:	de 4f       	sbci	r29, 0xFE	; 254
   1fc28:	68 81       	ld	r22, Y
   1fc2a:	79 81       	ldd	r23, Y+1	; 0x01
   1fc2c:	c6 53       	subi	r28, 0x36	; 54
   1fc2e:	d1 40       	sbci	r29, 0x01	; 1
   1fc30:	06 2b       	or	r16, r22
   1fc32:	17 2b       	or	r17, r23
   1fc34:	c0 5e       	subi	r28, 0xE0	; 224
   1fc36:	de 4f       	sbci	r29, 0xFE	; 254
   1fc38:	48 81       	ld	r20, Y
   1fc3a:	59 81       	ldd	r21, Y+1	; 0x01
   1fc3c:	6a 81       	ldd	r22, Y+2	; 0x02
   1fc3e:	7b 81       	ldd	r23, Y+3	; 0x03
   1fc40:	c0 52       	subi	r28, 0x20	; 32
   1fc42:	d1 40       	sbci	r29, 0x01	; 1
   1fc44:	de 01       	movw	r26, r28
   1fc46:	1b 96       	adiw	r26, 0x0b	; 11
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   1fc48:	31 e0       	ldi	r19, 0x01	; 1
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
							}

							/* Write FLASH */
							do {
								lowByte		=	*p++;
   1fc4a:	8c 91       	ld	r24, X
								highByte 	=	*p++;
   1fc4c:	11 96       	adiw	r26, 0x01	; 1
   1fc4e:	2c 91       	ld	r18, X
   1fc50:	11 97       	sbiw	r26, 0x01	; 1



//*****************************************************************************
int main(void)
{
   1fc52:	12 96       	adiw	r26, 0x02	; 2
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   1fc54:	c7 5c       	subi	r28, 0xC7	; 199
   1fc56:	de 4f       	sbci	r29, 0xFE	; 254
   1fc58:	28 83       	st	Y, r18
   1fc5a:	c9 53       	subi	r28, 0x39	; 57
   1fc5c:	d1 40       	sbci	r29, 0x01	; 1
   1fc5e:	c8 5c       	subi	r28, 0xC8	; 200
   1fc60:	de 4f       	sbci	r29, 0xFE	; 254
   1fc62:	18 82       	st	Y, r1
   1fc64:	c8 53       	subi	r28, 0x38	; 56
   1fc66:	d1 40       	sbci	r29, 0x01	; 1
   1fc68:	90 e0       	ldi	r25, 0x00	; 0
   1fc6a:	c8 5c       	subi	r28, 0xC8	; 200
   1fc6c:	de 4f       	sbci	r29, 0xFE	; 254
   1fc6e:	e8 81       	ld	r30, Y
   1fc70:	f9 81       	ldd	r31, Y+1	; 0x01
   1fc72:	c8 53       	subi	r28, 0x38	; 56
   1fc74:	d1 40       	sbci	r29, 0x01	; 1
   1fc76:	8e 2b       	or	r24, r30
   1fc78:	9f 2b       	or	r25, r31
   1fc7a:	0c 01       	movw	r0, r24
   1fc7c:	fa 01       	movw	r30, r20
   1fc7e:	60 93 5b 00 	sts	0x005B, r22
   1fc82:	30 93 57 00 	sts	0x0057, r19
   1fc86:	e8 95       	spm
   1fc88:	11 24       	eor	r1, r1

								address	=	address + 2;	// Select next word in memory
   1fc8a:	4e 5f       	subi	r20, 0xFE	; 254
   1fc8c:	5f 4f       	sbci	r21, 0xFF	; 255
   1fc8e:	6f 4f       	sbci	r22, 0xFF	; 255
   1fc90:	7f 4f       	sbci	r23, 0xFF	; 255
								size	-=	2;				// Reduce number of bytes to write by two
   1fc92:	02 50       	subi	r16, 0x02	; 2
   1fc94:	10 40       	sbci	r17, 0x00	; 0
							} while (size);					// Loop until all bytes written
   1fc96:	c9 f6       	brne	.-78     	; 0x1fc4a <main+0x1258>

							boot_page_write(tempaddress);
   1fc98:	85 e0       	ldi	r24, 0x05	; 5
   1fc9a:	c0 5e       	subi	r28, 0xE0	; 224
   1fc9c:	de 4f       	sbci	r29, 0xFE	; 254
   1fc9e:	e8 80       	ld	r14, Y
   1fca0:	f9 80       	ldd	r15, Y+1	; 0x01
   1fca2:	0a 81       	ldd	r16, Y+2	; 0x02
   1fca4:	1b 81       	ldd	r17, Y+3	; 0x03
   1fca6:	c0 52       	subi	r28, 0x20	; 32
   1fca8:	d1 40       	sbci	r29, 0x01	; 1
   1fcaa:	f7 01       	movw	r30, r14
   1fcac:	00 93 5b 00 	sts	0x005B, r16
   1fcb0:	80 93 57 00 	sts	0x0057, r24
   1fcb4:	e8 95       	spm
							boot_spm_busy_wait();
   1fcb6:	07 b6       	in	r0, 0x37	; 55
   1fcb8:	00 fc       	sbrc	r0, 0
   1fcba:	fd cf       	rjmp	.-6      	; 0x1fcb6 <main+0x12c4>
							boot_rww_enable();				// Re-enable the RWW section
   1fcbc:	81 e1       	ldi	r24, 0x11	; 17
   1fcbe:	80 93 57 00 	sts	0x0057, r24
   1fcc2:	e8 95       	spm
								size--;						// Decrease number of bytes to write
							} while (size);					// Loop until all bytes written
						#endif
						}
							msgLength	=	2;
						msgBuffer[1]	=	STATUS_CMD_OK;
   1fcc4:	1a 82       	std	Y+2, r1	; 0x02
   1fcc6:	c0 5e       	subi	r28, 0xE0	; 224
   1fcc8:	de 4f       	sbci	r29, 0xFE	; 254
   1fcca:	48 83       	st	Y, r20
   1fccc:	59 83       	std	Y+1, r21	; 0x01
   1fcce:	6a 83       	std	Y+2, r22	; 0x02
   1fcd0:	7b 83       	std	Y+3, r23	; 0x03
   1fcd2:	c0 52       	subi	r28, 0x20	; 32
   1fcd4:	d1 40       	sbci	r29, 0x01	; 1
   1fcd6:	7f c0       	rjmp	.+254    	; 0x1fdd6 <main+0x13e4>
					break;

				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   1fcd8:	fa 80       	ldd	r15, Y+2	; 0x02
   1fcda:	c5 5c       	subi	r28, 0xC5	; 197
   1fcdc:	de 4f       	sbci	r29, 0xFE	; 254
   1fcde:	f8 82       	st	Y, r15
   1fce0:	cb 53       	subi	r28, 0x3B	; 59
   1fce2:	d1 40       	sbci	r29, 0x01	; 1
   1fce4:	c6 5c       	subi	r28, 0xC6	; 198
   1fce6:	de 4f       	sbci	r29, 0xFE	; 254
   1fce8:	18 82       	st	Y, r1
   1fcea:	ca 53       	subi	r28, 0x3A	; 58
   1fcec:	d1 40       	sbci	r29, 0x01	; 1
   1fcee:	8b 81       	ldd	r24, Y+3	; 0x03
   1fcf0:	c8 2e       	mov	r12, r24
   1fcf2:	dd 24       	eor	r13, r13
   1fcf4:	c6 5c       	subi	r28, 0xC6	; 198
   1fcf6:	de 4f       	sbci	r29, 0xFE	; 254
   1fcf8:	08 81       	ld	r16, Y
   1fcfa:	19 81       	ldd	r17, Y+1	; 0x01
   1fcfc:	ca 53       	subi	r28, 0x3A	; 58
   1fcfe:	d1 40       	sbci	r29, 0x01	; 1
   1fd00:	c0 2a       	or	r12, r16
   1fd02:	d1 2a       	or	r13, r17
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
   1fd04:	1a 82       	std	Y+2, r1	; 0x02
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   1fd06:	89 81       	ldd	r24, Y+1	; 0x01
   1fd08:	be 01       	movw	r22, r28
   1fd0a:	6d 5f       	subi	r22, 0xFD	; 253
   1fd0c:	7f 4f       	sbci	r23, 0xFF	; 255
   1fd0e:	84 31       	cpi	r24, 0x14	; 20
   1fd10:	21 f5       	brne	.+72     	; 0x1fd5a <main+0x1368>
   1fd12:	96 01       	movw	r18, r12
							unsigned int data;

							// Read FLASH
							do {
	#if defined(RAMPZ)
								data	=	pgm_read_word_far(address);
   1fd14:	c0 5e       	subi	r28, 0xE0	; 224
   1fd16:	de 4f       	sbci	r29, 0xFE	; 254
   1fd18:	e8 80       	ld	r14, Y
   1fd1a:	f9 80       	ldd	r15, Y+1	; 0x01
   1fd1c:	0a 81       	ldd	r16, Y+2	; 0x02
   1fd1e:	1b 81       	ldd	r17, Y+3	; 0x03
   1fd20:	c0 52       	subi	r28, 0x20	; 32
   1fd22:	d1 40       	sbci	r29, 0x01	; 1
   1fd24:	0b bf       	out	0x3b, r16	; 59
   1fd26:	f7 01       	movw	r30, r14
   1fd28:	87 91       	elpm	r24, Z+
   1fd2a:	96 91       	elpm	r25, Z+
	#else
								data	=	pgm_read_word_near(address);
	#endif
								*p++	=	(unsigned char)data;		//LSB
   1fd2c:	db 01       	movw	r26, r22
   1fd2e:	8c 93       	st	X, r24
								*p++	=	(unsigned char)(data >> 8);	//MSB
   1fd30:	11 96       	adiw	r26, 0x01	; 1
   1fd32:	9c 93       	st	X, r25



//*****************************************************************************
int main(void)
{
   1fd34:	6e 5f       	subi	r22, 0xFE	; 254
   1fd36:	7f 4f       	sbci	r23, 0xFF	; 255
	#else
								data	=	pgm_read_word_near(address);
	#endif
								*p++	=	(unsigned char)data;		//LSB
								*p++	=	(unsigned char)(data >> 8);	//MSB
								address	+=	2;							// Select next word in memory
   1fd38:	d8 01       	movw	r26, r16
   1fd3a:	c7 01       	movw	r24, r14
   1fd3c:	02 96       	adiw	r24, 0x02	; 2
   1fd3e:	a1 1d       	adc	r26, r1
   1fd40:	b1 1d       	adc	r27, r1
   1fd42:	c0 5e       	subi	r28, 0xE0	; 224
   1fd44:	de 4f       	sbci	r29, 0xFE	; 254
   1fd46:	88 83       	st	Y, r24
   1fd48:	99 83       	std	Y+1, r25	; 0x01
   1fd4a:	aa 83       	std	Y+2, r26	; 0x02
   1fd4c:	bb 83       	std	Y+3, r27	; 0x03
   1fd4e:	c0 52       	subi	r28, 0x20	; 32
   1fd50:	d1 40       	sbci	r29, 0x01	; 1
								size	-=	2;
   1fd52:	22 50       	subi	r18, 0x02	; 2
   1fd54:	30 40       	sbci	r19, 0x00	; 0
							}while (size);
   1fd56:	f1 f6       	brne	.-68     	; 0x1fd14 <main+0x1322>
   1fd58:	36 c0       	rjmp	.+108    	; 0x1fdc6 <main+0x13d4>
   1fd5a:	c0 5e       	subi	r28, 0xE0	; 224
   1fd5c:	de 4f       	sbci	r29, 0xFE	; 254
   1fd5e:	28 81       	ld	r18, Y
   1fd60:	39 81       	ldd	r19, Y+1	; 0x01
   1fd62:	4a 81       	ldd	r20, Y+2	; 0x02
   1fd64:	5b 81       	ldd	r21, Y+3	; 0x03
   1fd66:	c0 52       	subi	r28, 0x20	; 32
   1fd68:	d1 40       	sbci	r29, 0x01	; 1



//*****************************************************************************
int main(void)
{
   1fd6a:	08 94       	sec
   1fd6c:	c1 08       	sbc	r12, r1
   1fd6e:	d1 08       	sbc	r13, r1
								EEARH	=	((address >> 8));
								address++;					// Select next EEPROM byte
								EECR	|=	(1<<EERE);			// Read EEPROM
								*p++	=	EEDR;				// Send EEPROM data
								size--;
							} while (size);
   1fd70:	76 01       	movw	r14, r12
   1fd72:	00 e0       	ldi	r16, 0x00	; 0
   1fd74:	10 e0       	ldi	r17, 0x00	; 0
   1fd76:	08 94       	sec
   1fd78:	c1 1c       	adc	r12, r1
   1fd7a:	d1 1c       	adc	r13, r1
   1fd7c:	08 94       	sec
   1fd7e:	e1 1c       	adc	r14, r1
   1fd80:	f1 1c       	adc	r15, r1
   1fd82:	01 1d       	adc	r16, r1
   1fd84:	11 1d       	adc	r17, r1
   1fd86:	e2 0e       	add	r14, r18
   1fd88:	f3 1e       	adc	r15, r19
   1fd8a:	04 1f       	adc	r16, r20
   1fd8c:	15 1f       	adc	r17, r21
						}
						else
						{
							/* Read EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   1fd8e:	21 bd       	out	0x21, r18	; 33
								EEARH	=	((address >> 8));
   1fd90:	bb 27       	eor	r27, r27
   1fd92:	a5 2f       	mov	r26, r21
   1fd94:	94 2f       	mov	r25, r20
   1fd96:	83 2f       	mov	r24, r19
   1fd98:	82 bd       	out	0x22, r24	; 34
								address++;					// Select next EEPROM byte
   1fd9a:	2f 5f       	subi	r18, 0xFF	; 255
   1fd9c:	3f 4f       	sbci	r19, 0xFF	; 255
   1fd9e:	4f 4f       	sbci	r20, 0xFF	; 255
   1fda0:	5f 4f       	sbci	r21, 0xFF	; 255
								EECR	|=	(1<<EERE);			// Read EEPROM
   1fda2:	f8 9a       	sbi	0x1f, 0	; 31
								*p++	=	EEDR;				// Send EEPROM data
   1fda4:	80 b5       	in	r24, 0x20	; 32
   1fda6:	db 01       	movw	r26, r22
   1fda8:	8d 93       	st	X+, r24
   1fdaa:	bd 01       	movw	r22, r26
								size--;
							} while (size);
   1fdac:	2e 15       	cp	r18, r14
   1fdae:	3f 05       	cpc	r19, r15
   1fdb0:	40 07       	cpc	r20, r16
   1fdb2:	51 07       	cpc	r21, r17
   1fdb4:	61 f7       	brne	.-40     	; 0x1fd8e <main+0x139c>
   1fdb6:	c0 5e       	subi	r28, 0xE0	; 224
   1fdb8:	de 4f       	sbci	r29, 0xFE	; 254
   1fdba:	28 83       	st	Y, r18
   1fdbc:	39 83       	std	Y+1, r19	; 0x01
   1fdbe:	4a 83       	std	Y+2, r20	; 0x02
   1fdc0:	5b 83       	std	Y+3, r21	; 0x03
   1fdc2:	c0 52       	subi	r28, 0x20	; 32
   1fdc4:	d1 40       	sbci	r29, 0x01	; 1
				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;
   1fdc6:	96 01       	movw	r18, r12
   1fdc8:	2d 5f       	subi	r18, 0xFD	; 253
   1fdca:	3f 4f       	sbci	r19, 0xFF	; 255
								EECR	|=	(1<<EERE);			// Read EEPROM
								*p++	=	EEDR;				// Send EEPROM data
								size--;
							} while (size);
						}
						*p++	=	STATUS_CMD_OK;
   1fdcc:	fb 01       	movw	r30, r22
   1fdce:	10 82       	st	Z, r1
   1fdd0:	04 c0       	rjmp	.+8      	; 0x1fdda <main+0x13e8>
					}
					break;

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   1fdd2:	80 ec       	ldi	r24, 0xC0	; 192
   1fdd4:	8a 83       	std	Y+2, r24	; 0x02
   1fdd6:	22 e0       	ldi	r18, 0x02	; 2
   1fdd8:	30 e0       	ldi	r19, 0x00	; 0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1fdda:	8b e1       	ldi	r24, 0x1B	; 27
   1fddc:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1fde0:	80 91 c0 00 	lds	r24, 0x00C0
   1fde4:	86 ff       	sbrs	r24, 6
   1fde6:	fc cf       	rjmp	.-8      	; 0x1fde0 <main+0x13ee>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1fde8:	80 91 c0 00 	lds	r24, 0x00C0
   1fdec:	80 64       	ori	r24, 0x40	; 64
   1fdee:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1fdf2:	c1 5d       	subi	r28, 0xD1	; 209
   1fdf4:	de 4f       	sbci	r29, 0xFE	; 254
   1fdf6:	f8 81       	ld	r31, Y
   1fdf8:	cf 52       	subi	r28, 0x2F	; 47
   1fdfa:	d1 40       	sbci	r29, 0x01	; 1
   1fdfc:	f0 93 c6 00 	sts	0x00C6, r31
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1fe00:	80 91 c0 00 	lds	r24, 0x00C0
   1fe04:	86 ff       	sbrs	r24, 6
   1fe06:	fc cf       	rjmp	.-8      	; 0x1fe00 <main+0x140e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1fe08:	80 91 c0 00 	lds	r24, 0x00C0
   1fe0c:	80 64       	ori	r24, 0x40	; 64
   1fe0e:	80 93 c0 00 	sts	0x00C0, r24
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
   1fe12:	43 2f       	mov	r20, r19
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1fe14:	30 93 c6 00 	sts	0x00C6, r19
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1fe18:	80 91 c0 00 	lds	r24, 0x00C0
   1fe1c:	86 ff       	sbrs	r24, 6
   1fe1e:	fc cf       	rjmp	.-8      	; 0x1fe18 <main+0x1426>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1fe20:	80 91 c0 00 	lds	r24, 0x00C0
   1fe24:	80 64       	ori	r24, 0x40	; 64
   1fe26:	80 93 c0 00 	sts	0x00C0, r24

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;

			c			=	msgLength&0x00FF;
   1fe2a:	92 2f       	mov	r25, r18
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1fe2c:	20 93 c6 00 	sts	0x00C6, r18
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1fe30:	80 91 c0 00 	lds	r24, 0x00C0
   1fe34:	86 ff       	sbrs	r24, 6
   1fe36:	fc cf       	rjmp	.-8      	; 0x1fe30 <main+0x143e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1fe38:	80 91 c0 00 	lds	r24, 0x00C0
   1fe3c:	80 64       	ori	r24, 0x40	; 64
   1fe3e:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1fe42:	8e e0       	ldi	r24, 0x0E	; 14
   1fe44:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1fe48:	80 91 c0 00 	lds	r24, 0x00C0
   1fe4c:	86 ff       	sbrs	r24, 6
   1fe4e:	fc cf       	rjmp	.-8      	; 0x1fe48 <main+0x1456>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1fe50:	80 91 c0 00 	lds	r24, 0x00C0
   1fe54:	80 64       	ori	r24, 0x40	; 64
   1fe56:	80 93 c0 00 	sts	0x00C0, r24
			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;
   1fe5a:	65 e1       	ldi	r22, 0x15	; 21
   1fe5c:	c1 5d       	subi	r28, 0xD1	; 209
   1fe5e:	de 4f       	sbci	r29, 0xFE	; 254
   1fe60:	e8 80       	ld	r14, Y
   1fe62:	cf 52       	subi	r28, 0x2F	; 47
   1fe64:	d1 40       	sbci	r29, 0x01	; 1
   1fe66:	6e 25       	eor	r22, r14

			c			=	msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
   1fe68:	69 27       	eor	r22, r25

			sendchar(TOKEN);
			checksum ^= TOKEN;
   1fe6a:	64 27       	eor	r22, r20
   1fe6c:	fe 01       	movw	r30, r28
   1fe6e:	31 96       	adiw	r30, 0x01	; 1
   1fe70:	10 c0       	rjmp	.+32     	; 0x1fe92 <main+0x14a0>

			p	=	msgBuffer;
			while ( msgLength )
			{
				c	=	*p++;
   1fe72:	90 81       	ld	r25, Z
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1fe74:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1fe78:	80 91 c0 00 	lds	r24, 0x00C0
   1fe7c:	86 ff       	sbrs	r24, 6
   1fe7e:	fc cf       	rjmp	.-8      	; 0x1fe78 <main+0x1486>
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
			{
				c	=	*p++;
   1fe80:	31 96       	adiw	r30, 0x01	; 1
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1fe82:	80 91 c0 00 	lds	r24, 0x00C0
   1fe86:	80 64       	ori	r24, 0x40	; 64
   1fe88:	80 93 c0 00 	sts	0x00C0, r24
			p	=	msgBuffer;
			while ( msgLength )
			{
				c	=	*p++;
				sendchar(c);
				checksum ^=c;
   1fe8c:	69 27       	eor	r22, r25
				msgLength--;
   1fe8e:	21 50       	subi	r18, 0x01	; 1
   1fe90:	30 40       	sbci	r19, 0x00	; 0

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
   1fe92:	21 15       	cp	r18, r1
   1fe94:	31 05       	cpc	r19, r1
   1fe96:	69 f7       	brne	.-38     	; 0x1fe72 <main+0x1480>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1fe98:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   1fe9c:	80 91 c0 00 	lds	r24, 0x00C0
   1fea0:	86 ff       	sbrs	r24, 6
   1fea2:	fc cf       	rjmp	.-8      	; 0x1fe9c <main+0x14aa>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   1fea4:	80 91 c0 00 	lds	r24, 0x00C0
   1fea8:	80 64       	ori	r24, 0x40	; 64
   1feaa:	80 93 c0 00 	sts	0x00C0, r24
			sendchar(checksum);
			seqNum++;
	
		#ifndef REMOVE_BOOTLOADER_LED
			//*	<MLS>	toggle the LED
			PROGLED_PORT	^=	(1<<PROGLED_PIN);	// active high LED ON
   1feae:	85 b1       	in	r24, 0x05	; 5
   1feb0:	80 58       	subi	r24, 0x80	; 128
   1feb2:	85 b9       	out	0x05, r24	; 5


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   1feb4:	99 20       	and	r9, r9
   1feb6:	81 f4       	brne	.+32     	; 0x1fed8 <main+0x14e6>
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
			seqNum++;
   1feb8:	c1 5d       	subi	r28, 0xD1	; 209
   1feba:	de 4f       	sbci	r29, 0xFE	; 254
   1febc:	08 81       	ld	r16, Y
   1febe:	cf 52       	subi	r28, 0x2F	; 47
   1fec0:	d1 40       	sbci	r29, 0x01	; 1
   1fec2:	0f 5f       	subi	r16, 0xFF	; 255
   1fec4:	c1 5d       	subi	r28, 0xD1	; 209
   1fec6:	de 4f       	sbci	r29, 0xFE	; 254
   1fec8:	08 83       	st	Y, r16
   1feca:	cf 52       	subi	r28, 0x2F	; 47
   1fecc:	d1 40       	sbci	r29, 0x01	; 1
   1fece:	90 e0       	ldi	r25, 0x00	; 0
   1fed0:	a0 e0       	ldi	r26, 0x00	; 0
   1fed2:	b0 e0       	ldi	r27, 0x00	; 0
   1fed4:	0c 94 98 f5 	jmp	0x1eb30	; 0x1eb30 <main+0x13e>
	delay_ms(100);
#endif


#ifndef REMOVE_BOOTLOADER_LED
	PROGLED_DDR		&=	~(1<<PROGLED_PIN);	// set to default
   1fed8:	27 98       	cbi	0x04, 7	; 4
	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED OFF
   1feda:	2f 98       	cbi	0x05, 7	; 5
   1fedc:	80 e0       	ldi	r24, 0x00	; 0
   1fede:	90 e0       	ldi	r25, 0x00	; 0
   1fee0:	20 ed       	ldi	r18, 0xD0	; 208
   1fee2:	37 e0       	ldi	r19, 0x07	; 7
   1fee4:	f9 01       	movw	r30, r18
   1fee6:	31 97       	sbiw	r30, 0x01	; 1
   1fee8:	f1 f7       	brne	.-4      	; 0x1fee6 <main+0x14f4>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   1feea:	01 96       	adiw	r24, 0x01	; 1
   1feec:	84 36       	cpi	r24, 0x64	; 100
   1feee:	91 05       	cpc	r25, r1
   1fef0:	c9 f7       	brne	.-14     	; 0x1fee4 <main+0x14f2>
//	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED OFf
	delay_ms(100);							// delay after exit
#endif


	asm volatile ("nop");			// wait until port has changed
   1fef2:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   1fef4:	80 91 c0 00 	lds	r24, 0x00C0
   1fef8:	8d 7f       	andi	r24, 0xFD	; 253
   1fefa:	80 93 c0 00 	sts	0x00C0, r24
	boot_rww_enable();				// enable application section
   1fefe:	81 e1       	ldi	r24, 0x11	; 17
   1ff00:	80 93 57 00 	sts	0x0057, r24
   1ff04:	e8 95       	spm


	asm volatile(
   1ff06:	ee 27       	eor	r30, r30
   1ff08:	ff 27       	eor	r31, r31
   1ff0a:	09 94       	ijmp
   1ff0c:	ff cf       	rjmp	.-2      	; 0x1ff0c <main+0x151a>
   1ff0e:	90 e0       	ldi	r25, 0x00	; 0
   1ff10:	0c 94 98 f5 	jmp	0x1eb30	; 0x1eb30 <main+0x13e>

0001ff14 <__divmodhi4>:
   1ff14:	97 fb       	bst	r25, 7
   1ff16:	09 2e       	mov	r0, r25
   1ff18:	07 26       	eor	r0, r23
   1ff1a:	0a d0       	rcall	.+20     	; 0x1ff30 <__divmodhi4_neg1>
   1ff1c:	77 fd       	sbrc	r23, 7
   1ff1e:	04 d0       	rcall	.+8      	; 0x1ff28 <__divmodhi4_neg2>
   1ff20:	2e d0       	rcall	.+92     	; 0x1ff7e <__udivmodhi4>
   1ff22:	06 d0       	rcall	.+12     	; 0x1ff30 <__divmodhi4_neg1>
   1ff24:	00 20       	and	r0, r0
   1ff26:	1a f4       	brpl	.+6      	; 0x1ff2e <__divmodhi4_exit>

0001ff28 <__divmodhi4_neg2>:
   1ff28:	70 95       	com	r23
   1ff2a:	61 95       	neg	r22
   1ff2c:	7f 4f       	sbci	r23, 0xFF	; 255

0001ff2e <__divmodhi4_exit>:
   1ff2e:	08 95       	ret

0001ff30 <__divmodhi4_neg1>:
   1ff30:	f6 f7       	brtc	.-4      	; 0x1ff2e <__divmodhi4_exit>
   1ff32:	90 95       	com	r25
   1ff34:	81 95       	neg	r24
   1ff36:	9f 4f       	sbci	r25, 0xFF	; 255
   1ff38:	08 95       	ret

0001ff3a <__udivmodsi4>:
   1ff3a:	a1 e2       	ldi	r26, 0x21	; 33
   1ff3c:	1a 2e       	mov	r1, r26
   1ff3e:	aa 1b       	sub	r26, r26
   1ff40:	bb 1b       	sub	r27, r27
   1ff42:	fd 01       	movw	r30, r26
   1ff44:	0d c0       	rjmp	.+26     	; 0x1ff60 <__udivmodsi4_ep>

0001ff46 <__udivmodsi4_loop>:
   1ff46:	aa 1f       	adc	r26, r26
   1ff48:	bb 1f       	adc	r27, r27
   1ff4a:	ee 1f       	adc	r30, r30
   1ff4c:	ff 1f       	adc	r31, r31
   1ff4e:	a2 17       	cp	r26, r18
   1ff50:	b3 07       	cpc	r27, r19
   1ff52:	e4 07       	cpc	r30, r20
   1ff54:	f5 07       	cpc	r31, r21
   1ff56:	20 f0       	brcs	.+8      	; 0x1ff60 <__udivmodsi4_ep>
   1ff58:	a2 1b       	sub	r26, r18
   1ff5a:	b3 0b       	sbc	r27, r19
   1ff5c:	e4 0b       	sbc	r30, r20
   1ff5e:	f5 0b       	sbc	r31, r21

0001ff60 <__udivmodsi4_ep>:
   1ff60:	66 1f       	adc	r22, r22
   1ff62:	77 1f       	adc	r23, r23
   1ff64:	88 1f       	adc	r24, r24
   1ff66:	99 1f       	adc	r25, r25
   1ff68:	1a 94       	dec	r1
   1ff6a:	69 f7       	brne	.-38     	; 0x1ff46 <__udivmodsi4_loop>
   1ff6c:	60 95       	com	r22
   1ff6e:	70 95       	com	r23
   1ff70:	80 95       	com	r24
   1ff72:	90 95       	com	r25
   1ff74:	9b 01       	movw	r18, r22
   1ff76:	ac 01       	movw	r20, r24
   1ff78:	bd 01       	movw	r22, r26
   1ff7a:	cf 01       	movw	r24, r30
   1ff7c:	08 95       	ret

0001ff7e <__udivmodhi4>:
   1ff7e:	aa 1b       	sub	r26, r26
   1ff80:	bb 1b       	sub	r27, r27
   1ff82:	51 e1       	ldi	r21, 0x11	; 17
   1ff84:	07 c0       	rjmp	.+14     	; 0x1ff94 <__udivmodhi4_ep>

0001ff86 <__udivmodhi4_loop>:
   1ff86:	aa 1f       	adc	r26, r26
   1ff88:	bb 1f       	adc	r27, r27
   1ff8a:	a6 17       	cp	r26, r22
   1ff8c:	b7 07       	cpc	r27, r23
   1ff8e:	10 f0       	brcs	.+4      	; 0x1ff94 <__udivmodhi4_ep>
   1ff90:	a6 1b       	sub	r26, r22
   1ff92:	b7 0b       	sbc	r27, r23

0001ff94 <__udivmodhi4_ep>:
   1ff94:	88 1f       	adc	r24, r24
   1ff96:	99 1f       	adc	r25, r25
   1ff98:	5a 95       	dec	r21
   1ff9a:	a9 f7       	brne	.-22     	; 0x1ff86 <__udivmodhi4_loop>
   1ff9c:	80 95       	com	r24
   1ff9e:	90 95       	com	r25
   1ffa0:	bc 01       	movw	r22, r24
   1ffa2:	cd 01       	movw	r24, r26
   1ffa4:	08 95       	ret

0001ffa6 <__eerd_byte_m1280>:
   1ffa6:	f9 99       	sbic	0x1f, 1	; 31
   1ffa8:	fe cf       	rjmp	.-4      	; 0x1ffa6 <__eerd_byte_m1280>
   1ffaa:	92 bd       	out	0x22, r25	; 34
   1ffac:	81 bd       	out	0x21, r24	; 33
   1ffae:	f8 9a       	sbi	0x1f, 0	; 31
   1ffb0:	99 27       	eor	r25, r25
   1ffb2:	80 b5       	in	r24, 0x20	; 32
   1ffb4:	08 95       	ret

0001ffb6 <__eewr_byte_m1280>:
   1ffb6:	26 2f       	mov	r18, r22

0001ffb8 <__eewr_r18_m1280>:
   1ffb8:	f9 99       	sbic	0x1f, 1	; 31
   1ffba:	fe cf       	rjmp	.-4      	; 0x1ffb8 <__eewr_r18_m1280>
   1ffbc:	1f ba       	out	0x1f, r1	; 31
   1ffbe:	92 bd       	out	0x22, r25	; 34
   1ffc0:	81 bd       	out	0x21, r24	; 33
   1ffc2:	20 bd       	out	0x20, r18	; 32
   1ffc4:	0f b6       	in	r0, 0x3f	; 63
   1ffc6:	f8 94       	cli
   1ffc8:	fa 9a       	sbi	0x1f, 2	; 31
   1ffca:	f9 9a       	sbi	0x1f, 1	; 31
   1ffcc:	0f be       	out	0x3f, r0	; 63
   1ffce:	01 96       	adiw	r24, 0x01	; 1
   1ffd0:	08 95       	ret

0001ffd2 <_exit>:
   1ffd2:	f8 94       	cli

0001ffd4 <__stop_program>:
   1ffd4:	ff cf       	rjmp	.-2      	; 0x1ffd4 <__stop_program>
